This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-11T10:01:23.183Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.
- Code comments have been removed.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.env.example
.eslintrc.json
.gitignore
.repomixignore
components.json
messages/en.json
messages/fr.json
next-sitemap.config.js
next.config.mjs
package.json
postcss.config.js
prettier.config.js
README.md
repomix.config.json
src/app/[locale]/[[...slug]]/page.tsx
src/app/[locale]/blog/[slug]/page.tsx
src/app/[locale]/landing/[[...slug]]/page.tsx
src/app/[locale]/layout.tsx
src/app/[locale]/not-found.tsx
src/app/[locale]/page.tsx.old
src/app/[locale]/projects/[slug]/page.tsx
src/app/[locale]/services/[slug]/page.tsx
src/app/[locale]/test/page.tsx
src/app/sitemap.ts
src/components/elements/Button.tsx
src/components/elements/ClientCard.tsx
src/components/elements/CultureCard.tsx
src/components/elements/ErrorBoundary.tsx
src/components/elements/FeatureCard.tsx
src/components/elements/PostCard.tsx
src/components/elements/ProjectCard.tsx
src/components/elements/ServiceCard.tsx
src/components/elements/Testimonial.tsx
src/components/form/components/DatePicker.tsx
src/components/form/components/DropZone.tsx
src/components/form/components/SelectInput.tsx
src/components/form/components/TextArea.tsx
src/components/form/components/TextInput.tsx
src/components/form/ContactForm.tsx
src/components/form/utils/FormData.tsx
src/components/images/Icon.tsx
src/components/images/ImageNextCloudinary.tsx
src/components/images/imageNextCloudinaryBasic.tsx
src/components/images/Logo.tsx
src/components/images/StylizedImage.tsx
src/components/sections/BlogPageIntro.tsx
src/components/sections/ContactFooter.tsx
src/components/sections/dynamic/Contact/ContactSection.tsx
src/components/sections/dynamic/Contact/Offices.tsx
src/components/sections/dynamic/CTA/CTA.tsx
src/components/sections/dynamic/Culture/CultureCard/CultureCard1.tsx
src/components/sections/dynamic/Culture/CultureSection.tsx
src/components/sections/dynamic/Features/FeaturesSection.tsx
src/components/sections/dynamic/Hero/HeroSection.tsx
src/components/sections/dynamic/PageIntro/PageIntroSection.tsx
src/components/sections/dynamic/Posts/PostCard/PostCard1.tsx
src/components/sections/dynamic/Posts/PostCard/PostCard2.tsx
src/components/sections/dynamic/Posts/PostsSection.tsx
src/components/sections/dynamic/PricingSection/PricingSection.tsx
src/components/sections/dynamic/Projects/ProjectCard/ProjectCard1.tsx
src/components/sections/dynamic/Projects/ProjectsSection.tsx
src/components/sections/dynamic/References/ClientCard/ClientCard1.tsx
src/components/sections/dynamic/References/ReferenceSection.tsx
src/components/sections/dynamic/Services/ServiceCard/ServiceCard1.tsx
src/components/sections/dynamic/Services/ServiceSection.tsx
src/components/sections/dynamic/Teams/TeamsCard/TeamCard1.tsx
src/components/sections/dynamic/Teams/TeamsCardSection.tsx
src/components/sections/dynamic/TestimonialSection.tsx
src/components/sections/Footer.tsx
src/components/sections/Navigation.tsx
src/components/sections/PageIntro.tsx
src/components/sections/Pagination.tsx
src/components/sections/SectionIntro.tsx
src/components/sections/SocialMedia.tsx
src/components/sections/TagList.tsx
src/components/ui/BasicMarkdown.tsx
src/components/ui/Border.tsx
src/components/ui/button.tsx
src/components/ui/calendar.tsx
src/components/ui/Container.tsx
src/components/ui/FadeIn.tsx
src/components/ui/form.tsx
src/components/ui/GrayscaleTransitionImage.tsx
src/components/ui/GridList.tsx
src/components/ui/GridPattern.tsx
src/components/ui/input.tsx
src/components/ui/label.tsx
src/components/ui/List.tsx
src/components/ui/message-markdown-memoized.tsx
src/components/ui/message-markdown.tsx
src/components/ui/pagination.tsx
src/components/ui/popover.tsx
src/components/ui/ReadMore.tsx
src/components/ui/RootLayout.tsx
src/components/ui/Section.tsx
src/components/ui/select.tsx
src/components/ui/StatList.tsx
src/components/ui/textarea.tsx
src/components/ui/toast.tsx
src/components/ui/toaster.tsx
src/components/ui/TopTip.tsx
src/hooks/use-toast.ts
src/hooks/useSWRConfig.ts
src/i18n/request.ts
src/i18n/routing.ts
src/lib/componentResolver.tsx
src/lib/helper.ts
src/lib/seo.ts
src/lib/utils.ts
src/middleware.ts
src/request/fetch.tsx
src/request/Fetcher.tsx
src/request/populate.ts
src/request/request.tsx
src/styles/base.css
src/styles/components.css
src/styles/tailwind.css
src/styles/typography.css
src/styles/utilities.css
src/types/client.ts
src/types/contact.ts
src/types/feature.ts
src/types/global.d.ts
src/types/member.ts
src/types/post.ts
src/types/project.ts
src/types/service.ts
src/types/tag.ts
src/types/team.ts
src/types/testimonial.ts
tagadart-ts.code-workspace
tailwind.config.ts
tsconfig.json

================================================================
Repository Files
================================================================

================
File: .env.example
================
NEXT_PUBLIC_API_URL = http://127.0.0.1:1337
# NEXT_PUBLIC_API_URL = https://tagadart-live-b00744013bc4.herokuapp.com
SITE_URL = http://localhost:3000
NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME=dza6hfy10

================
File: .eslintrc.json
================
{
  "extends": "next/core-web-vitals"
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files..

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local
.env

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: .repomixignore
================
# Add patterns to ignore here, one per line
# Example:
# *.log
# tmp/

public/
.vscode/
.next/
src/images/
CHANGELOG.md

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/styles/base.css",
    "baseColor": "neutral",
    "cssVariables": false,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  }
}

================
File: messages/en.json
================
{
  "Project": {
    "title": "Our Projects",
    "expertise": "Our Expertise",
    "content": "Description",
    "view_more": "View More",
    "client": "Client",
    "year": "Year",
    "service": "Services",
    "website": "Website"
  },
  "Service": {
    "view_more": "View More",
    "content": "Description"
  },
  "HomePage": {
    "title": "Hello World",
    "about": "About"
  },
  "General": {
    "read_more": "Read More",
    "read_less": "Read Less"
  },
  "Pricing": {
    "btn_pricing": "Get Started",
    "most_popular": "Most Popular"
  },
  "Contact": {
    "title": "Tell us more about your projects",
    "button_contact": "Contact Us",
    "offices": "Our Offices",
    "email_us": "Email Us",
    "budget": "Your Budget",
    "subject": "Subject",
    "fullname": "Full Name",
    "name": "Your Name",
    "email": "Your Email",
    "media": "Attachment(s)",
    "message": "Your Message",
    "phone": "Your Phone",
    "company": "Your Company",
    "follow_us": "Follow Us",
    "budget_label01": "Less than 5,000 CHF",
    "budget_label02": "10,000 CHF - 20,000 CHF",
    "budget_label03": "20,000 CHF - 50,000 CHF",
    "budget_label04": "50,000 CHF - 100,000 CHF",
    "form_submit_title": "Your message has been successfully sent",
    "form_submit_description": "Thank you for your message. We will contact you as soon as possible."
  },
  "Navigation": {
    "home": "Home",
    "project": "Projects",
    "services": "Services",
    "about": "About",
    "blog": "Blog",
    "contact": "Contact Us",
    "follow_us": "Follow Us"
  },
  "Team": {
    "title": "Meet Our Team",
    "view_more": "View More",
    "content": "Description"
  },
  "Reference": {
    "title": "References",
    "view_more": "View More",
    "content": "Description"
  },
  "Culture": {
    "title": "Culture",
    "view_more": "View More",
    "content": "Description"
  },
  "Pagination": {
    "previous": "Previous",
    "next": "Next",
    "morePages": "More Pages"
  }
}

================
File: messages/fr.json
================
{
  "Project": {
    "title": "Nos projets",
    "expertise": "Notre expertise",
    "content": "Description",
    "view_more": "Voir plus",
    "client": "Client",
    "year": "Année",
    "service": "Services",
    "website": "Site web"
  },
  "Service": {
    "view_more": "Voir plus",
    "content": "Description"
  },
  "HomePage": {
    "title": "Bonjour Monde",
    "about": "A propos"
  },
  "General": {
    "read_more": "Lire plus",
    "read_less": "Lire moins"
  },
  "Pricing": {
    "btn_pricing": "Commencez",
    "most_popular": "Le plus populaire"
  },
  "Contact": {
    "title": "Dites-nous en plus sur vos projets",
    "button_contact": "Contactez-nous",
    "offices": "Nos bureaux",
    "email_us": "Ecrivez-nous",
    "budget": "Votre budget",
    "subject": "Sujet",
    "fullname": "Nom complet",
    "name": "Votre nom",
    "email": "Votre email",
    "media": "Pièce(s) jointe(s)",
    "message": "Votre message",
    "phone": "Votre téléphone",
    "company": "Votre entreprise",
    "follow_us": "Suivez-nous",
    "budget_label01": "Moins de 5'000CHF",
    "budget_label02": "10 000CHF - 20 000CHF",
    "budget_label03": "20 000CHF - 50 000CHF",
    "budget_label04": "50 000CHF - 100 000CHF",
    "form_submit_title": "Votre message a été envoyé avec succès",
    "form_submit_description": "Nous vous remercions pour votre message. Nous vous contacterons dans les plus brefs délais."
  },
  "Navigation": {
    "home": "Accueil",
    "project": "Projets",
    "services": "Services",
    "about": "A propos",
    "blog": "Blog",
    "contact": "Contactez-nous",
    "follow_us": "Suivez-nous"
  },
  "Team": {
    "title": "L'équipe",
    "view_more": "Voir plus",
    "content": "Description"
  },
  "Reference": {
    "title": "Références",
    "view_more": "Voir plus",
    "content": "Description"
  },
  "Culture": {
    "title": "Culture",
    "view_more": "Voir plus",
    "content": "Description"
  },
  "Pagination": {
    "previous": "Précédent",
    "next": "Suivant",
    "morePages": "Plus de pages"
  }
}

================
File: next-sitemap.config.js
================
module.exports = {
  siteUrl: process.env.NEXT_PUBLIC_SITE_URL || 'https://tagadart.ch',
  generateRobotsTxt: true,
}

================
File: next.config.mjs
================
import createNextIntlPlugin from 'next-intl/plugin'
import withBundleAnalyzer from '@next/bundle-analyzer'
import TerserPlugin from 'terser-webpack-plugin'
import CssMinimizerPlugin from 'css-minimizer-webpack-plugin'

const withNextIntl = createNextIntlPlugin()

const withBundleAnalyzerConfig = withBundleAnalyzer({
  enabled: process.env.ANALYZE === 'true',
})

/** @type {import('next').NextConfig} */
const nextConfig = {
  pageExtensions: ['js', 'jsx', 'ts', 'tsx', 'mdx'],
  images: {
    domains: ['res.cloudinary.com'],
  },
  webpack(config, { dev, isServer }) {
    if (!dev && !isServer) {
      // Implement tree shaking for unused code
      config.optimization.usedExports = true

      // Optimize CSS bundles
      config.optimization.splitChunks = {
        cacheGroups: {
          styles: {
            name: 'styles',
            test: /\.css$/,
            chunks: 'all',
            enforce: true,
          },
        },
      }

      // Set up code minification for production
      config.optimization.minimizer = [
        // Use Terser for JavaScript minification
        new TerserPlugin({
          terserOptions: {
            compress: {
              drop_console: true, // Remove console logs
            },
          },
        }),
        // Use CssMinimizerPlugin for CSS minification
        new CssMinimizerPlugin(),
      ]
    }

    return config
  },
}

export default withBundleAnalyzerConfig(withNextIntl(nextConfig))

================
File: package.json
================
{
  "name": "tailwindui-studio",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "analyze": "ANALYZE=true next build",
    "build": "next build",
    "start": "next start",
    "format": "prettier --log-level warn --write \"./src/**/*.{tsx,ts}\"",
    "lint": "next lint && npx tsc --noEmit"
  },
  "browserslist": "defaults, not ie <= 11",
  "dependencies": {
    "@hookform/resolvers": "^3.9.0",
    "@next/bundle-analyzer": "^15.0.3",
    "@radix-ui/react-icons": "^1.3.0",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-popover": "^1.1.1",
    "@radix-ui/react-select": "^2.1.1",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-toast": "^1.2.1",
    "@types/date-fns": "^2.6.0",
    "@types/mdx": "^2.0.7",
    "@types/node": "^20.10.8",
    "@types/react": "^18.2.47",
    "@types/react-dom": "^18.2.18",
    "autoprefixer": "^10.4.20",
    "axios": "^1.7.4",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "date-fns": "^3.6.0",
    "fast-glob": "^3.2.12",
    "framer-motion": "^10.15.2",
    "lucide-react": "^0.427.0",
    "next": "^14.0.4",
    "next-cloudinary": "^6.12.0",
    "next-intl": "^3.19.1",
    "qs": "^6.13.0",
    "react": "^18.2.0",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.2.0",
    "react-dropzone": "^14.2.3",
    "react-hook-form": "^7.53.0",
    "react-loading-skeleton": "^3.5.0",
    "react-markdown": "^9.0.1",
    "rehype-highlight": "^7.0.0",
    "rehype-raw": "^7.0.0",
    "remark-gfm": "^4.0.0",
    "swr": "^2.2.5",
    "tailwind-merge": "^2.5.2",
    "tailwindcss": "^3.4.10",
    "tailwindcss-animate": "^1.0.7",
    "typescript": "^5.3.3",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@tailwindcss/typography": "^0.5.15",
    "@types/qs": "^6.9.15",
    "css-minimizer-webpack-plugin": "^7.0.0",
    "eslint": "^8.56.0",
    "eslint-config-next": "^14.0.4",
    "prettier": "^3.3.2",
    "prettier-plugin-tailwindcss": "^0.6.5",
    "terser-webpack-plugin": "^5.3.10"
  }
}

================
File: postcss.config.js
================
module.exports = {
  plugins: {
    'tailwindcss/nesting': {},
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: prettier.config.js
================
module.exports = {
  singleQuote: true,
  semi: false,
  plugins: ['prettier-plugin-tailwindcss'],
}

================
File: README.md
================
# Studio

Studio is a [Tailwind UI](https://tailwindui.com) site template built using [Tailwind CSS](https://tailwindcss.com) and [Next.js](https://nextjs.org).

## Getting started

To get started with this template, first install the npm dependencies:

```bash
npm install
```

Next, run the development server:

```bash
npm run dev
```

Finally, open [http://localhost:3000](http://localhost:3000) in your browser to view the website.

## Customizing

You can start editing this template by modifying the files in the `/src` folder. The site will auto-update as you edit these files.

## License

This site template is a commercial product and is licensed under the [Tailwind UI license](https://tailwindui.com/license).

## Learn more

To learn more about the technologies used in this site template, see the following resources:

- [Tailwind CSS](https://tailwindcss.com/docs) - the official Tailwind CSS documentation
- [Next.js](https://nextjs.org/docs) - the official Next.js documentation
- [Framer Motion](https://www.framer.com/docs/) - the official Framer Motion documentation
- [MDX](https://mdxjs.com/) - the official MDX documentation

================
File: repomix.config.json
================
{
  "output": {
    "filePath": "repomix-output.txt",
    "style": "plain",
    "removeComments": true,
    "removeEmptyLines": true,
    "topFilesLength": 5,
    "showLineNumbers": false,
    "copyToClipboard": false
  },
  "include": [],
  "ignore": {
    "useGitignore": true,
    "useDefaultPatterns": true,
    "customPatterns": []
  },
  "security": {
    "enableSecurityCheck": true
  }
}

================
File: src/app/[locale]/[[...slug]]/page.tsx
================
import type { Metadata } from 'next'
import { PageIntro } from '@/types/global'
import { Container } from '@/components/ui/Container'
import { generateSlugPageMetadata } from '@/lib/seo'
import { componentResolver } from '@/lib/componentResolver'
import { fetchPageBySlug } from '@/request/fetch'
type Props = {
  params: {
    lang: string
    slug: string
  }
}
export async function generateMetadata({ params }: Props): Promise<Metadata> {
  const page = await fetchPageBySlug(params.slug, params.lang)
  return generateSlugPageMetadata({ page })
}
export default async function PageRoute({ params }: Props) {
  const page = await fetchPageBySlug(params.slug, params.lang)
  if (!page || !page.data || page.data.length === 0) return null
  type Section = {
    id: number
    __component: string
    [key: string]: any
  }
  const contentSections = page?.data[0]?.structure
  return (
    <Container>
      {contentSections?.map((section: Section & PageIntro) =>
        componentResolver({ section, designType: section.designType }),
      )}
    </Container>
  )
}

================
File: src/app/[locale]/blog/[slug]/page.tsx
================
import type { Metadata } from 'next'
import { Border } from '@/components/ui/Border'
import { FadeIn } from '@/components/ui/FadeIn'
import { Post } from '@/types/post'
import { fetchPost } from '@/request/fetch'
import BasicMarkdown from '@/components/ui/BasicMarkdown'
import { BlogPageIntroSections } from '@/components/sections/BlogPageIntro'
import { generatePageMetadata } from '@/lib/seo'
import { componentResolver } from '@/lib/componentResolver'
import { notFound } from 'next/navigation'
type Props = {
  params: {
    slug: string
    locale: string
  }
}
export async function generateMetadata({ params }: Props): Promise<Metadata> {
  const post = await fetchPost(params.slug)
  return generatePageMetadata({
    data: post,
    type: 'blog',
    id: params.slug,
  })
}
export default async function ViewPost({ params: { slug } }: Props) {
  const post: Post = await fetchPost(slug)
  if (!post) {
    notFound()
  }
  const contentSections = post?.structure
  return (
    <article>
      <Border className="pt-16">
        <div className="mt-24 sm:mt-32 lg:mt-40">
          <FadeIn>
            <header className="mx-auto flex max-w-5xl flex-col text-center">
              <BlogPageIntroSections
                post={post}
                showCover={true}
                {...post.pageIntro}
              />
            </header>
          </FadeIn>
          <FadeIn
            className="[&>*]:mx-auto [&>*]:max-w-5xl [&>:first-child]:!mt-0 [&>:last-child]:!mb-0"
            key={slug}
            style={{ opacity: 1, transform: 'none' }}
          >
            <div>
              {contentSections?.map((section: any) =>
                componentResolver({ section, designType: 1 }),
              )}
            </div>
          </FadeIn>
        </div>
      </Border>
    </article>
  )
}

================
File: src/app/[locale]/landing/[[...slug]]/page.tsx
================
import FeaturesSection from '@/components/sections/dynamic/Features/FeaturesSection'
import PostsSection from '@/components/sections/dynamic/Posts/PostsSection'
import ProjectsSection from '@/components/sections/dynamic/Projects/ProjectsSection'
import ServicesSection from '@/components/sections/dynamic/Services/ServiceSection'
import TeamsSection from '@/components/sections/dynamic/Teams/TeamsCardSection'
import ReferenceSection from '@/components/sections/dynamic/References/ReferenceSection'
import ContactSection from '@/components/sections/dynamic/Contact/ContactSection'
import CultureSection from '@/components/sections/dynamic/Culture/CultureSection'
import TestimonialSection from '@/components/sections/dynamic/TestimonialSection'
import PageIntroSection from '@/components/sections/dynamic/PageIntro/PageIntroSection'
import HeroSection from '@/components/sections/dynamic/Hero/HeroSection'
import CTASection from '@/components/sections/dynamic/CTA/CTA'
import PricingSection from '@/components/sections/dynamic/PricingSection/PricingSection'
import { fetchAxiosAPI } from '@/request/request'
import { PageIntro } from '@/types/global'
import { Container } from '@/components/ui/Container'
type Props = {
  params: {
    lang: string
    slug: string
  }
}
async function getPageBySlug(slug: string, lang: string) {
  const querySlug = slug === undefined ? 'home' : slug
  const path = `/pages`
  const urlParamsObject = {
    filters: {
      slug: {
        $eq: querySlug,
      },
    },
    locale: lang,
    populate: {
      structure: {
        on: {
          'section.blog-section': {
            populate: [
              'sectionIntro',
              'posts',
              'posts.pageIntro',
              'posts.pageIntro.cover',
              'posts.author',
              'posts.author.avatar',
            ],
          },
          'section.projects-section': {
            populate: [
              'sectionIntro',
              'projects',
              'projects.pageIntro',
              'projects.pageIntro.cover',
              'projects.logo',
            ],
          },
          'section.contact-section': {
            populate: [
              'sectionIntro',
              'content',
              'content.offices',
              'content.emails',
              'content.socials',
            ],
          },
          'section.services-section': {
            populate: [
              'sectionIntro',
              'our_services',
              'our_services.pageIntro',
              'our_services.pageIntro.cover',
            ],
          },
          'section.pricing-section': {
            populate: ['sectionIntro', 'cards', 'cards.features'],
          },
          'section.team-section': {
            populate: [
              'sectionIntro',
              'members',
              'members.fullname',
              'members.avatar',
              'members.posts.pageIntro',
            ],
          },
          'section.reference-section': {
            populate: [
              'sectionIntro',
              'clients',
              'clients.name',
              'clients.logo',
            ],
          },
          'section.culture-section': {
            populate: ['sectionIntro', 'values', 'values.title'],
          },
          'section.cta': {
            populate: ['sectionIntro', 'buttons'],
          },
          'section.page-intro': {
            populate: ['title', 'eyebrow', 'content', 'cover'],
          },
          'section.features-section': {
            populate: ['sectionIntro', 'features'],
          },
          'section.hero-section': {
            populate: ['sectionIntro', 'sectionIntro.cover', 'buttons', 'logo'],
          },
        },
      },
    },
  }
  return await fetchAxiosAPI(path, urlParamsObject)
}
export default async function PageRoute({ params }: Props) {
  const page = await getPageBySlug(params.slug, params.lang)
  if (!page || !page.data || page.data.length === 0) return null
  type Section = {
    id: number
    __component: string
    [key: string]: any
  }
  const componentResolver = (section: any) => {
    switch (section.__component) {
      case 'section.blog-section':
        return (
          <PostsSection
            key={section.id}
            postsSection={section}
            designType={1}
          />
        )
      case 'section.projects-section':
        return (
          <ProjectsSection
            key={section.id}
            projectsSection={section}
            designType={2}
          />
        )
      case 'section.services-section':
        return (
          <ServicesSection
            key={section.id}
            servicesSection={section}
            designType={2}
          />
        )
      case 'section.reference-section':
        return (
          <ReferenceSection
            key={section.id}
            referenceSection={section}
            designType={2}
          />
        )
      case 'section.cta':
        return (
          <CTASection key={section.id} ctaSection={section} designType={10} />
        )
      case 'section.pricing-section':
        return (
          <PricingSection
            key={section.id}
            pricingSection={section}
            designType={10}
          />
        )
      case 'section.team-section':
        return (
          <TeamsSection
            key={section.id}
            teamsSection={section}
            designType={2}
          />
        )
      case 'section.culture-section':
        return (
          <CultureSection
            key={section.id}
            culturesSection={section}
            designType={2}
          />
        )
      case 'section.contact-section':
        return (
          <ContactSection
            key={section.id}
            contactSection={section}
            designType={2}
          />
        )
      case 'section.cta':
        return (
          <ContactSection
            key={section.id}
            contactSection={section}
            designType={2}
          />
        )
      case 'section.page-intro':
        return (
          <PageIntroSection
            key={section.id}
            pageIntroSection={section}
            designType={2}
          />
        )
      case 'section.features-section':
        return (
          <FeaturesSection
            key={section.id}
            featuresSection={section}
            designType={10}
          />
        )
      case 'section.hero-section':
        return (
          <HeroSection key={section.id} heroSection={section} designType={10} />
        )
      case 'section.testimonials':
        return (
          <TestimonialSection key={section.id} testimonialSection={section} />
        )
      default:
        return null
    }
  }
  const contentSections = page?.data[0]?.structure
  return (
    <Container>
      {contentSections?.map((section: Section & PageIntro) =>
        componentResolver(section),
      )}
    </Container>
  )
}

================
File: src/app/[locale]/layout.tsx
================
import { type Metadata } from 'next'
import { Toaster } from '@/components/ui/toaster'
import '@/styles/tailwind.css'
import { NextIntlClientProvider } from 'next-intl'
import { getMessages } from 'next-intl/server'
import { RootLayout } from '@/components/ui/RootLayout'
import Script from 'next/script'
import { Inter } from 'next/font/google'
import localFont from 'next/font/local'
export const metadata: Metadata = {
  title: {
    template: '%s -  Agence Digitale Écoresponsable - Tagadart',
    default: 'Tagadart - Agence Digitale Eco Responsable Lausanne',
  },
  icons: {
    icon: '/favicon.ico',
  },
}
const inter = Inter({
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-inter',
})
const monaSans = localFont({
  src: '../../../public/fonts/Mona-Sans.var.woff2',
  variable: '--font-mona-sans',
  display: 'swap',
})
export default async function LocaleLayout({
  children,
  params: { locale },
}: {
  children: React.ReactNode
  params: { locale: string }
}) {
  const messages = await getMessages()
  return (
    <html
      lang={locale}
      className={`h-full bg-neutral-950 text-base antialiased ${inter.variable} ${monaSans.variable}`}
    >
      <head>
        <Script
          src="https://www.googletagmanager.com/gtag/js?id=AW-16700186470"
          strategy="afterInteractive"
        />
        <Script id="google-analytics" strategy="afterInteractive">
          {`
          window.dataLayer = window.dataLayer || [];
          function gtag(){dataLayer.push(arguments);}
          gtag('js', new Date());
          gtag('config', 'AW-16700186470');
        `}
        </Script>
      </head>
      <body className="flex min-h-full flex-col">
        <NextIntlClientProvider messages={messages}>
          <RootLayout>{children}</RootLayout>
          <Toaster />
        </NextIntlClientProvider>
      </body>
    </html>
  )
}

================
File: src/app/[locale]/not-found.tsx
================
import Link from 'next/link'
import { Container } from '@/components/ui/Container'
import { FadeIn } from '@/components/ui/FadeIn'
export default function NotFound() {
  return (
    <Container className="flex h-full items-center pt-24 sm:pt-32 lg:pt-40">
      <FadeIn className="flex max-w-xl flex-col items-center text-center">
        <p className="font-display text-4xl font-semibold text-neutral-950 sm:text-5xl">
          404
        </p>
        <h1 className="mt-4 font-display text-2xl font-semibold text-neutral-950">
          Page not found
        </h1>
        <p className="mt-2 text-sm text-neutral-600">
          Sorry, we couldn’t find the page you’re looking for.
        </p>
        <Link
          href="/"
          className="mt-4 text-sm font-semibold text-neutral-950 transition hover:text-neutral-700"
        >
          Go to the home page
        </Link>
      </FadeIn>
    </Container>
  )
}

================
File: src/app/[locale]/page.tsx.old
================
import { type Metadata } from 'next'

import { ContactFooter } from '@/components/sections/ContactFooter'

import BlogSection from '@/components/sections/BlogSection'

import ProjectsSection from '@/components/sections/ProjectsSection'
import ServicesSection from '@/components/sections/ServicesSection'
import {
  fetchClients,
  fetchHomePage,
  fetchPosts,
  fetchProjects,
  fetchServices,
} from '@/request/fetch'
import { PageIntroSections } from '@/components/sections/PageIntro'
import ClientsSection from '@/components/sections/Clients'

export const metadata: Metadata = {
  description:
    'Agence de développement web et mobile en Suisse. Nous créons des applications web et mobiles sur mesure pour les entreprises et les startups.',
}

export default async function Home() {
  let homeData = null
  let posts = null
  let projects = null
  let services = null
  let clients = null

  try {
    homeData = await fetchHomePage()
    posts = await fetchPosts()
    projects = await fetchProjects()
    services = await fetchServices()
    clients = await fetchClients()
  } catch (error) {
    console.error('Failed to load data:', error)
    return <div>Failed to load data</div>
  }

  const {
    pageIntro,
    projectsSection,
    servicesSection,
    referencesSection,
    blogSection,
  } = homeData || ''

  return (
    <>
      <PageIntroSections {...pageIntro} />
      <ProjectsSection projectsSection={projectsSection} projects={projects} />
      <ServicesSection servicesSection={servicesSection} services={services} />
      <BlogSection blogSection={blogSection} posts={posts} />
      <ClientsSection clients={clients} referencesSection={referencesSection} />
      <ContactFooter />
      {/* <referencesSection /> //TODO : later add client/reference section */}
    </>
  )
}

================
File: src/app/[locale]/projects/[slug]/page.tsx
================
import type { Metadata } from 'next'
import BasicMarkdown from '@/components/ui/BasicMarkdown'
import { Testimonial } from '@/components/elements/Testimonial'
import { Container } from '@/components/ui/Container'
import { FadeIn } from '@/components/ui/FadeIn'
import { GrayscaleTransitionImage } from '@/components/ui/GrayscaleTransitionImage'
import { Project } from '@/types/project'
import { fetchProject } from '@/request/fetch'
import { PageIntroSections } from '@/components/sections/PageIntro'
import { getTranslations } from 'next-intl/server'
import { componentResolver } from '@/lib/componentResolver'
import { generatePageMetadata } from '@/lib/seo'
type Props = {
  params: {
    slug: string
  }
}
export async function generateMetadata({ params }: Props): Promise<Metadata> {
  const project = await fetchProject(params.slug)
  return generatePageMetadata({
    data: project,
    type: 'project',
    id: params.slug,
  })
}
export default async function ViewProjectPage({ params: { slug } }: Props) {
  const project: Project = await fetchProject(slug)
  if (!project) return null
  const contentSections = project?.structure
  const { pageIntro } = project || ''
  const t = await getTranslations('Project')
  return (
    <Container className="mt-24 sm:mt-32 lg:mt-40">
      <FadeIn>
        <header>
          <PageIntroSections showCover={false} centered={true} {...pageIntro} />
          <FadeIn>
            <div className="mt-24 border-t border-neutral-200 bg-white/50 sm:mt-32 lg:mt-24">
              <>
                <div className="mx-auto max-w-5xl">
                  <dl className="-mx-6 grid grid-cols-1 text-sm text-neutral-950 sm:mx-0 sm:grid-cols-4">
                    <div className="border-t border-neutral-200 px-6 py-4 first:border-t-0 sm:border-l sm:border-t-0">
                      <dt className="font-semibold">{t('client')}</dt>
                      <dd>{project.client}</dd>
                    </div>
                    <div className="border-t border-neutral-200 px-6 py-4 first:border-t-0 sm:border-l sm:border-t-0">
                      <dt className="font-semibold">{t('year')}</dt>
                      <dd>
                        <time dateTime={project.year}>{project.year}</time>
                      </dd>
                    </div>
                    <div className="border-t border-neutral-200 px-6 py-4 first:border-t-0 sm:border-l sm:border-t-0">
                      <dt className="font-semibold">{t('service')}</dt>
                      <dd>{project.service}</dd>
                    </div>
                    <div className="border-t border-neutral-200 px-6 py-4 first:border-t-0 sm:border-l sm:border-t-0">
                      <dt className="font-semibold">{t('website')}</dt>
                      <dd>
                        <a
                          href={project.link}
                          target="_blank"
                          rel="noopener noreferrer"
                        >
                          {project.link}
                        </a>
                      </dd>
                    </div>
                  </dl>
                </div>
              </>
            </div>
            {project?.pageIntro?.cover?.url && (
              <div className="max-w-[76rem0 -my-px mx-auto">
                <GrayscaleTransitionImage
                  src={`${project?.pageIntro?.cover?.url}`}
                  quality={90}
                  className="w-full py-6"
                  sizes="(min-width: 1216px) 76rem, 100vw"
                  priority
                  alt={project.pageIntro?.title}
                  width={800}
                  height={600}
                />
              </div>
            )}
          </FadeIn>
        </header>
      </FadeIn>
      <FadeIn key={slug} style={{ opacity: 1, transform: 'none' }}>
        <div className="[&>*]:mx-auto [&>*]:max-w-5xl [&>:first-child]:!mt-0 [&>:last-child]:!mb-0">
          {contentSections?.map((section: any) =>
            componentResolver({ section, designType: 1 }),
          )}
        </div>
      </FadeIn>
    </Container>
  )
}

================
File: src/app/[locale]/services/[slug]/page.tsx
================
import type { Metadata } from 'next'
import { Service } from '@/types/service'
import { fetchService } from '@/request/fetch'
import { Border } from '@/components/ui/Border'
import { FadeIn } from '@/components/ui/FadeIn'
import BasicMarkdown from '@/components/ui/BasicMarkdown'
import { getTranslations } from 'next-intl/server'
import { PageIntroSections } from '@/components/sections/PageIntro'
import { generatePageMetadata } from '@/lib/seo'
import { notFound } from 'next/navigation'
import { componentResolver } from '@/lib/componentResolver'
type Props = {
  params: {
    slug: string
    locale: string
  }
}
export async function generateMetadata({ params }: Props): Promise<Metadata> {
  const service = await fetchService(params.slug)
  return generatePageMetadata({
    data: service,
    type: 'service',
    id: params.slug,
  })
}
async function getService(slug: string) {
  const service = await fetchService(slug)
  if (!service) return null
  return service
}
export default async function ViewServicePage({ params: { slug } }: Props) {
  const [service, t] = await Promise.all([
    getService(slug),
    getTranslations('Service'),
  ])
  if (!service) {
    notFound()
  }
  const contentSections = service?.structure
  return (
    <article>
      <Border className="pt-16">
        <div className="mt-24 sm:mt-32 lg:mt-40">
          <FadeIn>
            <header className="mx-auto flex max-w-5xl flex-col text-center">
              <PageIntroSections
                showCover={false}
                centered
                {...service.pageIntro}
              />
            </header>
          </FadeIn>
          <FadeIn
            className="[&>*]:mx-auto [&>*]:max-w-5xl [&>:first-child]:!mt-0 [&>:last-child]:!mb-0"
            key={slug}
            style={{ opacity: 1, transform: 'none' }}
          >
            <div>
              {contentSections?.map((section: any) =>
                componentResolver({ section, designType: 1 }),
              )}
            </div>
          </FadeIn>
          {
}
        </div>
      </Border>
    </article>
  )
}

================
File: src/app/[locale]/test/page.tsx
================
import NextCloudinaryImageBasic from '@/components/images/imageNextCloudinaryBasic'
const TestPage: React.FC = () => {
  return (
    <div className="flex min-h-screen flex-col items-center justify-center bg-gray-100">
      <NextCloudinaryImageBasic
        alt="LOGO"
        width={600}
        height={600}
        crop={'fit'}
        src="logo_tagadart_2ef62a5f8c"
      />
      <NextCloudinaryImageBasic
        alt="LOGO"
        width={100}
        height={100}
        src="climact_logo_b928550624_55cbb1b1a7.webp"
      />
      <NextCloudinaryImageBasic
        alt="LOGO"
        width={100}
        height={100}
        crop={'fit'}
        src="EPFL_ab5f7697d7.jpg"
      />
      <div className="grid grid-cols-3 gap-4">
        <NextCloudinaryImageBasic
          alt="LOGO"
          width={400}
          height={600}
          crop={'fill'}
          src="Community_App_Flyer_b2de057f30.png"
        />
        <NextCloudinaryImageBasic
          alt="LOGO"
          width={400}
          height={600}
          crop={'fill'}
          src="Community_App_Flyer_b2de057f30.png"
        />
        <NextCloudinaryImageBasic
          alt="LOGO"
          width={400}
          height={600}
          crop={'fill'}
          src="Community_App_Flyer_b2de057f30.png"
        />
      </div>
      {
}
      <NextCloudinaryImageBasic
        alt="LOGO"
        width={100}
        height={100}
        crop={'fit'}
        className="rounded-full"
        src="Nic_Temoignage_9fe5ea31a5.jpg"
      />
    </div>
  )
}
export default TestPage

================
File: src/app/sitemap.ts
================
import { MetadataRoute } from 'next'
import { fetchPosts, fetchProjects, fetchServices } from '@/request/fetch'
type SitemapRoute = {
  url: string
  lastModified: Date
  changeFrequency: 'yearly' | 'monthly' | 'weekly' | 'daily'
  priority: number
}
export default async function sitemap(): Promise<MetadataRoute.Sitemap> {
  const baseUrl = process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000'
  const staticRoutes: SitemapRoute[] = [
    {
      url: baseUrl,
      lastModified: new Date(),
      changeFrequency: 'yearly',
      priority: 1,
    },
    {
      url: `${baseUrl}/blog`,
      lastModified: new Date(),
      changeFrequency: 'weekly',
      priority: 0.8,
    },
    {
      url: `${baseUrl}/services`,
      lastModified: new Date(),
      changeFrequency: 'yearly',
      priority: 0.8,
    },
    {
      url: `${baseUrl}/projects`,
      lastModified: new Date(),
      changeFrequency: 'monthly',
      priority: 0.8,
    },
    {
      url: `${baseUrl}/contact`,
      lastModified: new Date(),
      changeFrequency: 'yearly',
      priority: 0.5,
    },
  ]
  const [projects, posts, services] = await Promise.all([
    fetchProjects(),
    fetchPosts(),
    fetchServices(),
  ])
  const postRoutes = posts.map((post: any) => ({
    url: `${baseUrl}/posts/${post.id}`,
    lastModified: new Date(post.updatedAt),
    changeFrequency: 'weekly' as const,
    priority: 0.6,
  }))
  const serviceRoutes = services.map((service: any) => ({
    url: `${baseUrl}/services/${service.id}`,
    lastModified: new Date(service.updatedAt),
    changeFrequency: 'monthly' as const,
    priority: 0.7,
  }))
  const projectRoutes = projects.map((project: any) => ({
    url: `${baseUrl}/projects/${project.id}`,
    lastModified: new Date(project.updatedAt),
    changeFrequency: 'monthly' as const,
    priority: 0.8,
  }))
  return [...staticRoutes, ...projectRoutes, ...serviceRoutes, ...postRoutes]
}

================
File: src/components/elements/Button.tsx
================
import Link from 'next/link'
import clsx from 'clsx'
type ButtonProps = {
  invert?: boolean
} & (
  | React.ComponentPropsWithoutRef<typeof Link>
  | (React.ComponentPropsWithoutRef<'button'> & { href?: undefined })
)
export function Button({
  invert = false,
  className,
  children,
  ...props
}: ButtonProps) {
  className = clsx(
    className,
    'inline-flex rounded-full px-4 py-1.5 text-sm font-semibold transition',
    invert
      ? 'bg-white text-neutral-950 hover:bg-neutral-200'
      : 'bg-neutral-950 text-white hover:bg-neutral-800',
  )
  let inner = <span className="relative top-px">{children}</span>
  if (typeof props.href === 'undefined') {
    return (
      <button className={className} {...props}>
        {inner}
      </button>
    )
  }
  return (
    <Link className={className} {...props}>
      {inner}
    </Link>
  )
}

================
File: src/components/elements/ClientCard.tsx
================
import { Client } from '@/types/client'
import React from 'react'
import { FadeIn } from '../ui/FadeIn'
import { Border } from '../ui/Border'
import { Cloud } from 'lucide-react'
import NextCloudinaryImage from '../images/ImageNextCloudinary'
interface ClientCardProps {
  client: Client
}
const ClientCard: React.FC<ClientCardProps> = ({ client }) => {
  return (
    <>
      <FadeIn className="overflow-hidden">
        {client?.logo && (
          <NextCloudinaryImage
            width={160}
            height={80}
            alt={client?.logo?.alternativeText}
            src={`${client?.logo?.url}`}
            crop="fit"
          />
        )}
      </FadeIn>
      {
}
    </>
  )
}
export default ClientCard

================
File: src/components/elements/CultureCard.tsx
================
import React from 'react'
import { GridListItem } from '../ui/GridList'
import { Culture } from '@/types/global'
interface CultureCardProps {
  culture: Culture
}
const CultureCard: React.FC<CultureCardProps> = ({ culture }) => {
  return (
    <GridListItem key={culture.id} title={culture.title} invert>
      {culture.content}
    </GridListItem>
  )
}
export default CultureCard

================
File: src/components/elements/ErrorBoundary.tsx
================
import React, { Component, ReactNode, ErrorInfo } from 'react'
interface ErrorBoundaryProps {
  children: ReactNode
}
interface ErrorBoundaryState {
  hasError: boolean
}
class ErrorBoundary extends Component<ErrorBoundaryProps, ErrorBoundaryState> {
  constructor(props: ErrorBoundaryProps) {
    super(props)
    this.state = { hasError: false }
  }
  static getDerivedStateFromError(_: Error): ErrorBoundaryState {
    return { hasError: true }
  }
  componentDidCatch(error: Error, errorInfo: ErrorInfo): void {
    console.log({ error, errorInfo })
  }
  render() {
    if (this.state.hasError) {
      return (
        <div>
          <h2>Oops, there is an error!</h2>
          <button
            type="button"
            onClick={() => this.setState({ hasError: false })}
          >
            Try again?
          </button>
        </div>
      )
    }
    return this.props.children
  }
}
export default ErrorBoundary

================
File: src/components/elements/FeatureCard.tsx
================
import React from 'react'
interface FeatureProps {
  title: string
  icon: React.ComponentType<any>
  description: string
  href: string
  eyebrow: string
  pageIntro: { title: string; content: string }
}
interface FeatureCardProps {
  feature: FeatureProps
}
const FeatureCard: React.FC<FeatureCardProps> = ({ feature }) => {
  return (
    <div className="bg-white py-8 sm:py-12">
      <div className="mx-auto max-w-7xl px-6 lg:px-8">
        <div className="mx-auto mt-16 max-w-2xl sm:mt-20 lg:mt-24 lg:max-w-none">
          <dl className="g grid max-w-xl grid-cols-1 gap-x-8 gap-y-16 lg:max-w-none lg:grid-cols-3">
            <div key={feature.pageIntro?.title} className="flex flex-col">
              <dt className="flex items-center gap-x-3 text-base font-semibold leading-7 text-gray-900">
                {
}
                {feature.pageIntro?.title}
              </dt>
              <dd className="mt-4 flex flex-auto flex-col text-base leading-7 text-gray-600">
                <p className="flex-auto">{feature.pageIntro?.content}</p>
                <p className="mt-6">
                  <a
                    href={feature.href}
                    className="text-sm font-semibold leading-6 text-indigo-600"
                  >
                    Learn more <span aria-hidden="true">→</span>
                  </a>
                </p>
              </dd>
            </div>
          </dl>
        </div>
      </div>
    </div>
  )
}
export default FeatureCard

================
File: src/components/elements/PostCard.tsx
================
import React from 'react'
import Link from 'next/link'
import { Post } from '@/types/post'
import NextCloudinaryImage from '../images/ImageNextCloudinary'
import BasicMarkdown from '../ui/BasicMarkdown'
import { formatDate, truncateWithEllipses } from '@/lib/helper'
interface PostCardProps {
  post: Post
  designType?: 'default' | 'alternate'
}
const renderContentOld = (post: Post, designType?: 'default' | 'alternate') => {
  switch (designType) {
    case 'alternate':
      return (
        <article
          key={post.id}
          className="flex flex-col items-start justify-between"
        >
          <div className="relative w-full">
            {post?.pageIntro?.cover?.url && (
              <NextCloudinaryImage
                alt={post.pageIntro.title}
                src={post.pageIntro.cover.url}
                width={300}
                height={200}
                className="aspect-[16/9] w-full rounded-2xl bg-gray-100 object-cover sm:aspect-[2/1] lg:aspect-[3/2]"
              />
            )}
            <div className="absolute inset-0 rounded-2xl ring-1 ring-inset ring-gray-900/10" />
          </div>
          <div className="max-w-xl">
            <div className="mt-8 flex items-center gap-x-4 text-xs">
              <time className="text-gray-500">
                {formatDate(post.publishedAt, 'fr')}
              </time>
              {
}
            </div>
            <div className="group relative">
              <h3 className="mt-3 text-lg font-semibold leading-6 text-gray-900 group-hover:text-gray-600">
                <Link href={`/blog/${post.id}`}>
                  <span className="absolute inset-0" />
                  {post.pageIntro.title}
                </Link>
              </h3>
              <p className="mt-5 line-clamp-3 text-sm leading-6 text-gray-600">
                {truncateWithEllipses(post.pageIntro.content, 150)}
              </p>
            </div>
            <div className="relative mt-8 flex items-center gap-x-4">
              {post.author?.avatar && (
                <NextCloudinaryImage
                  alt={post.author.fullname}
                  src={post.author.avatar.url}
                  width={48}
                  gravity="face"
                  height={48}
                  className="rounded-full bg-gray-100"
                />
              )}
              <div className="text-sm leading-6">
                <p className="font-semibold text-gray-900">
                  <span className="absolute inset-0" />
                  {post.author.fullname}
                </p>
                <p className="text-gray-600">{post.author.title}</p>
              </div>
            </div>
          </div>
        </article>
      )
    default:
      return (
        <article
          key={post.id}
          className="relative isolate mb-24 flex flex-col gap-8 lg:flex-row"
        >
          <div className="mx-auto text-center">
            {post?.pageIntro?.cover?.url && (
              <NextCloudinaryImage
                src={post.pageIntro.cover.url}
                alt={post.pageIntro.title}
                width={320}
                height={320}
                className="inset-0 rounded-2xl object-cover"
              />
            )}
          </div>
          <div>
            <div className="flex items-center gap-x-4 text-xs">
              <time className="text-gray-500">
                {formatDate(post.publishedAt, 'fr')}
              </time>
            </div>
            <div className="group relative max-w-xl">
              <h3 className="mt-3 text-lg font-semibold leading-6 text-gray-900 group-hover:text-gray-600">
                <Link href={`/blog/${post.id}`}>
                  <span className="absolute inset-0" />
                  {post.pageIntro.title}
                </Link>
              </h3>
              <div className="typography">
                <BasicMarkdown>
                  {truncateWithEllipses(post.pageIntro.content, 150)}
                </BasicMarkdown>
              </div>
              {post?.author && (
                <div className="mt-6 flex items-center">
                  {post?.author?.avatar && (
                    <NextCloudinaryImage
                      src={post.author.avatar.url}
                      alt={post.author.fullname}
                      width={50}
                      height={50}
                      className="h-12 w-12 rounded-full object-cover"
                    />
                  )}
                  <div className="ml-4">
                    <p className="text-sm font-medium text-gray-900">
                      {post.author.fullname}
                    </p>
                    <p className="text-sm text-gray-500">{post.author.title}</p>
                  </div>
                </div>
              )}
            </div>
            <div className="mt-6 border-b border-gray-200"></div>
          </div>
        </article>
      )
  }
}
const PostCard: React.FC<PostCardProps> = ({ post, designType }) => {
  return renderContentOld(post, designType)
}
export default PostCard

================
File: src/components/elements/ProjectCard.tsx
================
import React from 'react'
import { FadeIn } from '@/components/ui/FadeIn'
import Image from 'next/image'
import { Button, buttonVariants } from '@/components/ui/button'
import { Project } from '@/types/project'
import ReactMarkdown from 'react-markdown'
import { getTranslations } from 'next-intl/server'
import Link from 'next/link'
import NextCloudinaryImage from '../images/ImageNextCloudinary'
import BasicMarkdown from '../ui/BasicMarkdown'
import { truncateWithEllipses } from '@/lib/helper'
interface ProjectCardProps {
  project: Project
}
const ProjectCard: React.FC<ProjectCardProps> = async ({ project }) => {
  const t = await getTranslations('Project')
  return (
    <FadeIn key={project.id} className="flex">
      <Link href={`/projects/${project.id}`}>
        <article className="relative flex w-full flex-col rounded-3xl p-6 ring-1 ring-neutral-950/5 transition hover:bg-neutral-50 sm:p-8">
          <div className="flex items-center">
            <div>
              <NextCloudinaryImage
                src={project.logo.url}
                alt={project.client}
                width={100}
                height={20}
                crop="fill"
                className="mr-3"
              />
            </div>
          </div>
          {project.pageIntro.cover && (
            <div className="my-6">
              <NextCloudinaryImage
                src={project.pageIntro.cover.url}
                alt={project.pageIntro.title}
                width={600}
                height={500}
                className="rounded-md"
                crop="fill"
              />
            </div>
          )}
          <p className="mt-6 flex gap-x-2 text-sm text-neutral-950">
            <time dateTime={project.year} className="font-semibold">
              {project.year}
            </time>
            <span className="text-neutral-300" aria-hidden="true">
              /
            </span>
            <span>{project.service}</span>
          </p>
          <p className="mt-6 font-display text-2xl font-semibold text-neutral-950">
            {project?.pageIntro?.title}
          </p>
          <div className="mt-4 text-base text-neutral-600">
            <BasicMarkdown>
              {truncateWithEllipses(project?.pageIntro?.content, 75)}
            </BasicMarkdown>
          </div>
          <div className="mt-6">
            {
}
            <Button variant="primary">{t('view_more')}</Button>
          </div>
        </article>
      </Link>
    </FadeIn>
  )
}
export default ProjectCard

================
File: src/components/elements/ServiceCard.tsx
================
import { Service } from '@/types/service'
import Icon from '@/components/images/Icon'
import BasicMarkdown from '../ui/BasicMarkdown'
import { getTranslations } from 'next-intl/server'
import { truncateWithEllipses } from '@/lib/helper'
import Link from 'next/link'
import { IconProps } from '@radix-ui/react-icons/dist/types'
export const ServiceCard: React.FC<{ service: Service }> = async ({
  service,
}) => {
  const t = await getTranslations('Service')
  return (
    <div key={service.id} className="flex flex-col">
      <dt className="items-top flex min-h-20 gap-x-3 text-xl font-bold leading-7 text-gray-900">
        <div className="text-primary-600">
          <Icon
            size={48}
            name={service.classIcon as IconProps}
          />
        </div>
        {service.pageIntro.title}
      </dt>
      <dd className="mt-1 flex flex-auto flex-col text-lg leading-6 text-gray-600">
        <BasicMarkdown>
          {truncateWithEllipses(service.pageIntro.content, 150)}
        </BasicMarkdown>
        {}
        <Link
          href={`/services/${service.id}`}
          className="mt-4 text-sm font-semibold leading-6 text-primary-600"
        >
          {t('view_more')} <span aria-hidden="true">→</span>
        </Link>
      </dd>
    </div>
  )
}

================
File: src/components/elements/Testimonial.tsx
================
import { Border } from '@/components/ui/Border'
import { Member } from '@/types/member'
import clsx from 'clsx'
import Image from 'next/image'
import NextCloudinaryImage from '../images/ImageNextCloudinary'
function TestimonialWithImage({
  author,
  children,
  className,
}: {
  author: Member
  children: React.ReactNode
  className?: string
}) {
  return (
    <figure
      className={clsx(
        'grid grid-cols-[auto,1fr] items-center gap-x-4 gap-y-8 sm:grid-cols-12 sm:grid-rows-[1fr,auto,auto,1fr] sm:gap-x-10 lg:gap-x-16',
        className,
      )}
    >
      <blockquote className="col-span-2 text-xl/7 text-neutral-600 sm:col-span-7 sm:col-start-6 sm:row-start-2">
        {typeof children === 'string' ? <p>{children}</p> : children}
      </blockquote>
      <div className="col-start-1 row-start-2 sm:col-span-5 sm:row-span-full">
        <NextCloudinaryImage
          {...author.avatar}
          src={author.avatar.url}
          alt={author.fullname}
          width={192}
          height={192}
          className="m-auto rounded-xl grayscale sm:rounded-3xl"
        />
      </div>
      <figcaption className="text-sm text-neutral-950 sm:col-span-7 sm:row-start-3 sm:text-base">
        <span className="font-semibold">{author.fullname}</span>
        <span className="hidden font-semibold sm:inline">, </span>
        <br className="sm:hidden" />
        <span className="sm:font-semibold">{author.title}</span>
      </figcaption>
    </figure>
  )
}
function TestimonialWithoutImage({
  author,
  children,
  className,
}: {
  author: Member
  children: React.ReactNode
  className?: string
}) {
  return (
    <Border position="left" className={clsx('pl-8', className)}>
      <figure className="text-sm">
        <blockquote className="text-neutral-600 [&>*]:relative [&>:first-child]:before:absolute [&>:first-child]:before:right-full [&>:first-child]:before:content-['“'] [&>:last-child]:after:content-['”']">
          {typeof children === 'string' ? <p>{children}</p> : children}
        </blockquote>
        <figcaption className="mt-6 font-semibold text-neutral-950">
          {author?.fullname}, {author?.role}
        </figcaption>
      </figure>
    </Border>
  )
}
export function Testimonial(
  props:
    | React.ComponentPropsWithoutRef<typeof TestimonialWithImage>
    | (React.ComponentPropsWithoutRef<typeof TestimonialWithoutImage> & {
        image?: undefined
      }),
) {
  if (props.author?.avatar) {
    return <TestimonialWithImage {...props} />
  }
  return <TestimonialWithoutImage {...props} />
}

================
File: src/components/form/components/DatePicker.tsx
================
import { fr } from 'date-fns/locale'
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@/components/ui/popover'
import { CalendarIcon } from 'lucide-react'
import { Calendar } from '@/components/ui/calendar'
import { Button } from '@/components/ui/button'
import { cn } from '@/lib/utils'
import { formatDate } from '@/lib/helper'
import { DateRange } from 'react-day-picker'
import {
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form'
import format from 'date-fns/format'
interface CustomDatePickerProps {
  type: 'single' | 'range'
  helper?: React.ReactNode
}
interface GFieldProps {
  valName: string
  label: string
  placeholder?: string
  description?: string
  required?: boolean
  control: any
}
export default function DatePickerInput(
  props: GFieldProps & CustomDatePickerProps,
) {
  const {
    valName,
    label,
    placeholder,
    description,
    required,
    control,
    ...rest
  } = props
  return (
    <FormField
      control={control}
      name={valName}
      render={({ field }) => (
        <FormItem className="flex flex-col">
          <FormLabel>{label}</FormLabel>
          <Popover>
            <PopoverTrigger asChild>
              <FormControl>
                <Button
                  variant={'outline'}
                  className={cn(
                    'w-[240px] pl-3 text-left font-normal',
                    !field.value && 'text-muted-foreground',
                  )}
                >
                  {field.value ? (
                    formatDate(field.value, 'fr')
                  ) : (
                    <span>{placeholder}</span>
                  )}
                  <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                </Button>
              </FormControl>
            </PopoverTrigger>
            <PopoverContent className="w-auto p-0" align="start">
              <Calendar
                mode="single"
                selected={field.value}
                onSelect={field.onChange}
                disabled={(date) =>
                  date > new Date() || date < new Date('1900-01-01')
                }
                initialFocus
              />
            </PopoverContent>
          </Popover>
          <FormDescription>{description}</FormDescription>
          <FormMessage />
        </FormItem>
      )}
    />
  )
}

================
File: src/components/form/components/DropZone.tsx
================
import React, { useState, useCallback } from 'react'
import {
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form'
import { useDropzone } from 'react-dropzone'
import { useForm } from 'react-hook-form'
type Props = {
  valName: string
  label: string
  description?: string
  required?: boolean
  control: any
  multiple?: boolean
}
export function DropzoneInput({
  valName,
  label,
  description,
  required,
  control,
  multiple = true,
}: Props) {
  return (
    <FormField
      control={control}
      name={valName}
      render={({ field, fieldState }) => (
        <FormItem>
          <FormLabel>{label}</FormLabel>
          <FormControl>
            <DropzoneComponent
              field={field}
              fieldState={fieldState}
              valName={valName}
              multiple={multiple}
            />
          </FormControl>
          {description && <FormDescription>{description}</FormDescription>}
          <FormMessage />
        </FormItem>
      )}
    />
  )
}
function DropzoneComponent({
  field,
  fieldState,
  valName,
  multiple,
}: {
  field: any
  fieldState: any
  valName: string
  multiple: boolean
}) {
  const [selectedFiles, setSelectedFiles] = useState<File[]>([])
  const { setValue, getValues } = useForm()
  const onDrop = useCallback(
    (acceptedFiles: File[]) => {
      const files = multiple ? acceptedFiles : [acceptedFiles[0]]
      field.onChange(files)
    },
    [multiple, field],
  )
  const removeFile = (file: File) => {
    const newFiles = selectedFiles.filter((f: File) => f !== file)
    setSelectedFiles(newFiles)
    field.onChange(newFiles)
  }
  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    multiple,
  })
  return (
    <div
      {...getRootProps()}
      className={`rounded-lg border border-dashed p-4 ${
        isDragActive ? 'border-blue-500' : 'border-gray-300'
      }`}
    >
      {
}
      <input {...getInputProps()} />
      {isDragActive ? (
        <p>Déposez les fichiers ici...</p>
      ) : (
        <p>
          Glissez-déposez des fichiers ici, ou cliquez pour sélectionner des
          fichiers
        </p>
      )}
      {}
      {selectedFiles && selectedFiles.length > 0 && (
        <ul className="mt-2">
          {selectedFiles.map((file: File, index: number) => (
            <li key={index} className="flex items-center justify-between">
              <span>{file.name}</span>
              <button
                type="button"
                onClick={() => removeFile(file)}
                className="ml-4 text-red-500 hover:text-red-700"
              >
                Supprimer
              </button>
            </li>
          ))}
        </ul>
      )}
    </div>
  )
}

================
File: src/components/form/components/SelectInput.tsx
================
import React from 'react'
import {
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select'
type Props = {
  valName: string
  label: string
  placeholder?: string
  description?: string
  required?: boolean
  control: any
  options: { value: string; label: string }[]
}
export function SelectInput({
  valName,
  label,
  placeholder,
  description,
  required,
  control,
  options,
}: Props) {
  return (
    <FormField
      control={control}
      name={valName}
      render={({ field }) => (
        <FormItem>
          <FormLabel>{label}</FormLabel>
          <Select onValueChange={field.onChange} defaultValue={field.value}>
            <FormControl>
              <SelectTrigger>
                <SelectValue placeholder={placeholder} />
              </SelectTrigger>
            </FormControl>
            <SelectContent>
              {options.map((option) => (
                <SelectItem key={option.value} value={option.value}>
                  {option.label}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
          <FormDescription>{description}</FormDescription>
          <FormMessage />
        </FormItem>
      )}
    />
  )
}

================
File: src/components/form/components/TextArea.tsx
================
import React from 'react'
import {
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form'
type Props = {
  valName: string
  label: string
  placeholder?: string
  description?: string
  required?: boolean
  control: any
}
import { Textarea } from '@/components/ui/textarea'
export function TextArea({
  valName,
  label,
  placeholder,
  description,
  required,
  control,
}: Props) {
  return (
    <FormField
      control={control}
      name={valName}
      render={({ field }) => (
        <FormItem>
          <FormLabel>{label}</FormLabel>
          <FormControl>
            {}
            <Textarea placeholder={placeholder} {...field} />
          </FormControl>
          <FormDescription>{description}</FormDescription>
          <FormMessage />
        </FormItem>
      )}
    />
  )
}

================
File: src/components/form/components/TextInput.tsx
================
import React from 'react'
import {
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form'
type Props = {
  valName: string
  label: string
  placeholder?: string
  description?: string
  required?: boolean
  control: any
}
import { Input } from '@/components/ui/input'
export function TextInput({
  valName,
  label,
  placeholder,
  description,
  required,
  control,
}: Props) {
  return (
    <FormField
      control={control}
      name={valName}
      render={({ field }) => (
        <FormItem>
          <FormLabel>{label}</FormLabel>
          <FormControl>
            <Input placeholder={placeholder} {...field} />
          </FormControl>
          <FormDescription>{description}</FormDescription>
          <FormMessage />
        </FormItem>
      )}
    />
  )
}

================
File: src/components/form/ContactForm.tsx
================
'use client'
import { zodResolver } from '@hookform/resolvers/zod'
import { useForm } from 'react-hook-form'
import { z } from 'zod'
import { Button } from '@/components/ui/button'
import { Form } from '@/components/ui/form'
import { toast } from '@/hooks/use-toast'
import { TextInput } from './components/TextInput'
import { postAxiosAPI } from '@/request/request'
import { DropzoneInput } from './components/DropZone'
import { useTranslations } from 'next-intl'
import { TextArea } from './components/TextArea'
import { SelectInput } from './components/SelectInput'
const FormSchema = z.object({
  fullname: z.string().min(2, {
    message: 'Fullname must be at least 2 characters.',
  }),
  subject: z.string().min(2, {
    message: 'Subject must be at least 2 characters.',
  }),
  emailTo: z.string().email({
    message: 'Email must be a valid email address.',
  }),
  phone: z.string().min(2, {
    message: 'Telephone must be at least 2 characters.',
  }),
  message: z.string().min(2, {
    message: 'Subject must be at least 2 characters.',
  }),
  media: z.array(z.unknown()).optional(),
  budget: z.string().optional(),
})
const formDataContact = async (values: z.infer<typeof FormSchema>) => {
  const formData = new FormData()
  const newValues = {
    ...values,
    media: null,
  }
  formData.append('data', JSON.stringify(newValues))
  if (values.media && values.media.length > 0) {
    values.media.map((file: any) => {
      formData.append('files.media', file, file.name)
    })
  }
  return formData
}
export function ContactForm() {
  const t = useTranslations('Contact')
  const form = useForm<z.infer<typeof FormSchema>>({
    resolver: zodResolver(FormSchema),
    defaultValues: {
      fullname: '',
      emailTo: '',
      phone: '',
      subject: '',
      message: '',
      budget: '',
      media: [],
    },
  })
  async function onSubmit(data: z.infer<typeof FormSchema>) {
    try {
      const formData = await formDataContact(data)
      await postAxiosAPI('/email-contact', formData)
      toast({
        title: t('form_submit_title'),
        description: t('form_submit_description'),
        variant: 'success',
      })
      form.reset()
    } catch (error) {
      console.error(error)
    }
  }
  const budgetOptions = [
    { value: t('budget_label01'), label: t('budget_label01') },
    { value: t('budget_label02'), label: t('budget_label02') },
    { value: t('budget_label03'), label: t('budget_label03') },
    { value: t('budget_label04'), label: t('budget_label04') },
  ]
  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="w-2/3">
        <h2 className="font-display text-lg font-semibold text-neutral-950">
          {t('title')}
        </h2>
        <div className="mt-6 space-y-6">
          <TextInput
            valName="subject"
            label={t('subject')}
            placeholder="Réduire l'impact de mon application"
            control={form.control}
          />
          <TextInput
            valName="fullname"
            label={t('fullname')}
            placeholder="Giovanni Greenialdo"
            control={form.control}
          />
          <TextInput
            valName="phone"
            label={t('phone')}
            control={form.control}
          />
          <SelectInput
            valName="budget"
            label={t('budget')}
            options={budgetOptions}
            control={form.control}
          />
          <TextArea
            valName="message"
            label={t('message')}
            control={form.control}
          />
          <TextInput
            valName="emailTo"
            label={t('email')}
            placeholder="giovanni@swisscom.ch"
            control={form.control}
          />
          <DropzoneInput
            valName="media"
            label={t('media')}
            control={form.control}
          />
          {
}
          <Button type="submit">Submit</Button>
        </div>
      </form>
    </Form>
  )
}

================
File: src/components/form/utils/FormData.tsx
================
export const formDataImgExample = async (values: any) => {
  const formData = new FormData()
  const newValues = {
    ...values,
    media: null,
    cover: null,
    avatar: null,
  }
  formData.append('data', JSON.stringify(newValues))
  if (values.media && values.media[0] instanceof File) {
    formData.append('files.media', values.media[0], values.media[0].name)
  }
  if (values.cover && values.cover[0] instanceof File) {
    formData.append('files.cover', values.cover[0], values.cover[0].name)
  }
  if (values.avatar && values.avatar[0] instanceof File) {
    formData.append('files.avatar', values.avatar[0], values.avatar[0].name)
  }
  return formData
}

================
File: src/components/images/Icon.tsx
================
import dynamic from 'next/dynamic'
import { LucideProps } from 'lucide-react'
import dynamicIconImports from 'lucide-react/dynamicIconImports'
export interface IconProps extends LucideProps {
  name: keyof typeof dynamicIconImports
}
const Icon = ({ name, ...props }: IconProps) => {
  const LucideIcon = dynamic(dynamicIconImports[name])
  return <LucideIcon {...props} />
}
export default Icon

================
File: src/components/images/ImageNextCloudinary.tsx
================
'use client'
import { CldImage, CldImageProps } from 'next-cloudinary'
import Skeleton from 'react-loading-skeleton'
import 'react-loading-skeleton/dist/skeleton.css'
import { useState } from 'react'
interface NextCloudinaryImageProps extends Omit<CldImageProps, 'src'> {
  alt: string
  width: number
  height: number
  src: string
  priority?: boolean
  className?: string
  showSkeleton?: boolean
  crop?:
    | 'fill'
    | 'crop'
    | 'auto'
    | 'fill_pad'
    | 'scale'
    | 'fit'
    | 'thumb'
    | 'pad'
    | 'limit'
    | 'mfit'
    | 'mpad'
    | 'lfill'
    | 'lpad'
    | 'imagga_scale'
    | 'imagga_crop'
  gravity?:
    | 'auto'
    | 'face'
    | 'faces'
    | 'center'
    | 'north'
    | 'north_east'
    | 'east'
    | 'south_east'
    | 'south'
    | 'south_west'
    | 'west'
    | 'north_west'
  radius?: string
  effect?: string
  quality?: 'auto' | number
  fetchFormat?: 'auto' | 'png' | 'jpg' | 'gif' | 'webp' | 'avif'
  dpr?: 'auto' | number
}
const NextCloudinaryImage = ({
  alt,
  width,
  height,
  src,
  priority = false,
  className = '',
  showSkeleton = true,
  crop = 'fit',
  gravity,
  radius,
  effect,
  quality = 'auto',
  fetchFormat = 'auto',
  dpr = 'auto',
  ...props
}: NextCloudinaryImageProps) => {
  const [isLoading, setIsLoading] = useState(showSkeleton)
  const [hasError, setHasError] = useState(false)
  const imageConfig = {
    src,
    alt,
    width,
    height,
    className: `transition-opacity duration-300 ${
      isLoading ? 'opacity-0' : 'opacity-100'
    } ${className}`,
    crop,
    gravity,
    quality,
    format: fetchFormat,
    dpr,
    radius,
    effect,
  }
  console.log(src, 'src')
  return (
    <div
    >
      {isLoading && showSkeleton && (
        <div className="absolute inset-0 z-10">
          <Skeleton
            height="100%"
            width="100%"
            baseColor="#f3f4f6"
            highlightColor="#e5e7eb"
            duration={1.5}
          />
        </div>
      )}
      <CldImage
        priority={true}
        {...imageConfig}
        {...props}
        alt={alt ? alt : 'default'}
        style={{ width: width, height: 'auto' }}
        onLoad={() => setIsLoading(false)}
        onError={(e) => {
          setIsLoading(false)
          setHasError(true)
          console.error('Image load failed:', src)
          props.onError?.(e)
        }}
      />
      {hasError && (
        <div className="absolute inset-0 flex items-center justify-center bg-gray-100 p-4 text-sm text-gray-500">
          Unable to load image
        </div>
      )}
    </div>
  )
}
export default NextCloudinaryImage

================
File: src/components/images/imageNextCloudinaryBasic.tsx
================
'use client'
import { useState } from 'react'
import { CldImage, CldImageProps } from 'next-cloudinary'
import Skeleton from 'react-loading-skeleton'
import 'react-loading-skeleton/dist/skeleton.css'
import clsx from 'clsx'
type OptimizedImageProps = CldImageProps & {
  className?: string
  skeletonClassName?: string
}
const OptimizedImage = ({
  alt,
  width,
  height,
  src,
  crop,
  priority = false,
  removeBackground = false,
  format = 'auto',
  quality = 'auto',
  className,
  skeletonClassName,
  ...props
}: OptimizedImageProps) => {
  const [isLoading, setIsLoading] = useState(!priority)
  return (
    <div className="relative">
      {isLoading && (
        <div className={clsx('absolute inset-0', skeletonClassName)}>
          <Skeleton
            className="h-full w-full"
            baseColor="#f3f4f6"
            highlightColor="#e5e7eb"
          />
        </div>
      )}
      <CldImage
        src={src}
        alt={alt}
        width={width}
        height={height}
        crop={crop}
        priority={priority}
        format={format}
        quality={quality}
        removeBackground={removeBackground}
        className={clsx(
          'h-auto max-w-full transition-opacity duration-300',
          className,
          {
            'opacity-0': isLoading,
            'opacity-100': !isLoading,
          },
        )}
        onLoad={() => setIsLoading(false)}
        {...props}
      />
    </div>
  )
}
export default OptimizedImage

================
File: src/components/images/Logo.tsx
================
import { useId } from 'react'
import clsx from 'clsx'
export function Logomark({
  invert = false,
  filled = false,
  ...props
}: React.ComponentPropsWithoutRef<'svg'> & {
  invert?: boolean
  filled?: boolean
}) {
  let id = useId()
  return (
    <svg viewBox="0 0 32 32" aria-hidden="true" {...props}>
      <rect
        clipPath={`url(#${id}-clip)`}
        className={clsx(
          'h-8 transition-all duration-300',
          invert ? 'fill-white' : 'fill-neutral-950',
          filled ? 'w-8' : 'w-0 group-hover/logo:w-8',
        )}
      />
      <use
        href={`#${id}-path`}
        className={invert ? 'stroke-white' : 'stroke-neutral-950'}
        fill="none"
        strokeWidth="1.5"
      />
      <defs>
        <path
          id={`${id}-path`}
          d="M3.25 26v.75H7c1.305 0 2.384-.21 3.346-.627.96-.415 1.763-1.02 2.536-1.752.695-.657 1.39-1.443 2.152-2.306l.233-.263c.864-.975 1.843-2.068 3.071-3.266 1.209-1.18 2.881-1.786 4.621-1.786h5.791V5.25H25c-1.305 0-2.384.21-3.346.627-.96.415-1.763 1.02-2.536 1.751-.695.658-1.39 1.444-2.152 2.307l-.233.263c-.864.975-1.843 2.068-3.071 3.266-1.209 1.18-2.881 1.786-4.621 1.786H3.25V26Z"
        />
        <clipPath id={`${id}-clip`}>
          <use href={`#${id}-path`} />
        </clipPath>
      </defs>
    </svg>
  )
}
export function Logo({
  className,
  invert = false,
  filled = false,
  fillOnHover = false,
  ...props
}: React.ComponentPropsWithoutRef<'svg'> & {
  invert?: boolean
  filled?: boolean
  fillOnHover?: boolean
}) {
  return (
    <svg
      viewBox="0 0 130 32"
      aria-hidden="true"
      className={clsx(fillOnHover && 'group/logo', className)}
      {...props}
    >
      <Logomark
        preserveAspectRatio="xMinYMid meet"
        invert={invert}
        filled={filled}
      />
      <path
        className={invert ? 'fill-white' : 'fill-neutral-950'}
        d="M52.928 23.716c5.184 0 7.992-1.992 7.992-5.28 0-3.888-2.688-4.8-7.512-5.376-3.36-.408-4.728-.672-4.728-2.448 0-1.464 1.44-2.376 3.912-2.376 2.4 0 3.936.864 4.104 2.784h3.576c-.24-3.288-3-5.232-7.536-5.232-4.728 0-7.68 1.896-7.68 5.208 0 3.48 2.712 4.464 7.416 5.04 3.216.408 4.8.648 4.8 2.664 0 1.584-1.392 2.544-4.224 2.544-3.048 0-4.68-1.176-4.752-3.288H44.6c.072 3.408 2.616 5.76 8.328 5.76Zm14.175-.216h3.312v-2.928h-1.968c-.84 0-1.272-.24-1.272-1.104v-6.144h3.24v-2.592h-3.24V6.676l-3.36.648v3.408h-2.496v2.592h2.496v7.2c0 2.04 1.248 2.976 3.288 2.976Zm10.078.216c2.16 0 4.104-1.008 4.944-2.64h.168l.144 2.424h3.288V10.732h-3.432v6.336c0 2.4-1.584 4.032-3.984 4.032-2.328 0-3.264-1.368-3.264-3.936v-6.432h-3.432v7.032c0 4.416 2.256 5.952 5.568 5.952Zm16.24.048c2.52 0 4.2-1.008 4.944-2.496h.168l.072 2.232h3.264V6.004h-3.408v7.008h-.168c-.792-1.56-2.592-2.52-4.848-2.52-3.816 0-6.384 2.592-6.384 6.624 0 4.056 2.568 6.648 6.36 6.648Zm1.032-2.616c-2.472 0-3.96-1.536-3.96-4.032s1.488-4.008 3.96-4.008 3.984 1.512 3.984 3.648v.744c0 2.136-1.536 3.648-3.984 3.648Zm9.485-12.216h3.408V6.004h-3.408v2.928Zm0 14.568h3.408V10.732h-3.408V23.5Zm12.481.24c4.584 0 7.56-2.52 7.56-6.624 0-4.152-3-6.624-7.56-6.624s-7.56 2.52-7.56 6.624c0 4.128 3.024 6.624 7.56 6.624Zm0-2.64c-2.592 0-4.128-1.56-4.128-3.984s1.536-3.984 4.128-3.984c2.616 0 4.152 1.536 4.152 3.984 0 2.424-1.56 3.984-4.152 3.984Zm8.794 2.4h3.384v-2.88h-3.384v2.88Z"
      />
    </svg>
  )
}

================
File: src/components/images/StylizedImage.tsx
================
import { useId } from 'react'
import Image, { type ImageProps } from 'next/image'
import clsx from 'clsx'
const shapes = [
  {
    width: 655,
    height: 680,
    path: 'M537.827 9.245A11.5 11.5 0 0 1 549.104 0h63.366c7.257 0 12.7 6.64 11.277 13.755l-25.6 128A11.5 11.5 0 0 1 586.87 151h-28.275a15.999 15.999 0 0 0-15.689 12.862l-59.4 297c-1.98 9.901 5.592 19.138 15.689 19.138h17.275l.127.001c.85.009 1.701.074 2.549.009 11.329-.874 21.411-7.529 24.88-25.981.002-.012.016-.016.023-.007.008.009.022.005.024-.006l24.754-123.771A11.5 11.5 0 0 1 580.104 321h63.366c7.257 0 12.7 6.639 11.277 13.755l-25.6 128A11.5 11.5 0 0 1 617.87 472H559c-22.866 0-28.984 7.98-31.989 25.931-.004.026-.037.035-.052.014-.015-.02-.048-.013-.053.012l-24.759 123.798A11.5 11.5 0 0 1 490.87 631h-29.132a14.953 14.953 0 0 0-14.664 12.021c-4.3 21.502-23.18 36.979-45.107 36.979H83.502c-29.028 0-50.8-26.557-45.107-55.021l102.4-512C145.096 91.477 163.975 76 185.902 76h318.465c10.136 0 21.179-5.35 23.167-15.288l10.293-51.467Zm-512 160A11.5 11.5 0 0 1 37.104 160h63.366c7.257 0 12.7 6.639 11.277 13.755l-25.6 128A11.5 11.5 0 0 1 74.87 311H11.504c-7.257 0-12.7-6.639-11.277-13.755l25.6-128Z',
  },
  {
    width: 719,
    height: 680,
    path: 'M89.827 9.245A11.5 11.5 0 0 1 101.104 0h63.366c7.257 0 12.7 6.64 11.277 13.755l-25.6 128A11.5 11.5 0 0 1 138.87 151H75.504c-7.257 0-12.7-6.639-11.277-13.755l25.6-128Zm-64 321A11.5 11.5 0 0 1 37.104 321h63.366c7.257 0 12.7 6.639 11.277 13.755l-25.6 128A11.5 11.5 0 0 1 74.87 472H11.504c-7.257 0-12.7-6.639-11.277-13.755l25.6-128ZM526.795 470a15.999 15.999 0 0 0-15.689 12.862l-32.032 160.159c-4.3 21.502-23.18 36.979-45.107 36.979H115.502c-29.028 0-50.8-26.557-45.107-55.021l102.4-512C177.096 91.477 195.975 76 217.902 76h318.465c29.028 0 50.8 26.557 45.107 55.021l-33.768 168.841c-1.98 9.901 5.592 19.138 15.689 19.138h17.075l.127.001c.85.009 1.701.074 2.549.009 11.329-.874 21.411-7.529 24.88-25.981.002-.012.016-.016.023-.007.008.009.022.005.024-.006l24.754-123.771A11.5 11.5 0 0 1 644.104 160h63.366c7.257 0 12.7 6.639 11.277 13.755l-25.6 128A11.5 11.5 0 0 1 681.87 311H623c-22.866 0-28.984 7.98-31.989 25.931-.004.026-.037.035-.052.014-.015-.02-.048-.013-.053.012l-24.759 123.798A11.5 11.5 0 0 1 554.87 470h-28.075Z',
  },
  {
    width: 719,
    height: 680,
    path: 'M632.827 9.245A11.5 11.5 0 0 1 644.104 0h63.366c7.257 0 12.7 6.64 11.277 13.755l-25.6 128A11.5 11.5 0 0 1 681.87 151h-28.275a15.999 15.999 0 0 0-15.689 12.862l-95.832 479.159c-4.3 21.502-23.18 36.979-45.107 36.979H178.502c-29.028 0-50.8-26.557-45.107-55.021l102.4-512C240.096 91.477 258.975 76 280.902 76h318.465c10.136 0 21.179-5.35 23.167-15.288l10.293-51.467Zm0 479A11.5 11.5 0 0 1 644.104 479h63.366c7.257 0 12.7 6.639 11.277 13.755l-25.6 128A11.5 11.5 0 0 1 681.87 630h-63.366c-7.257 0-12.7-6.639-11.277-13.755l25.6-128ZM37.104 159a11.5 11.5 0 0 0-11.277 9.245l-25.6 128C-1.196 303.361 4.247 310 11.504 310H74.87a11.5 11.5 0 0 0 11.277-9.245l24.76-123.798a.03.03 0 0 1 .052-.012c.015.021.048.012.052-.014C114.016 158.98 120.134 151 143 151h58.87a11.5 11.5 0 0 0 11.277-9.245l25.6-128C240.17 6.64 234.727 0 227.47 0h-63.366a11.5 11.5 0 0 0-11.277 9.245l-24.754 123.771c-.002.011-.016.015-.024.006-.007-.009-.021-.005-.023.007-3.469 18.452-13.551 25.107-24.88 25.981-.848.065-1.699 0-2.549-.009l-.127-.001H37.104Z',
  },
]
type ImagePropsWithOptionalAlt = Omit<ImageProps, 'alt'> & { alt?: string }
export function StylizedImage({
  shape = 0,
  className,
  ...props
}: ImagePropsWithOptionalAlt & { shape?: 0 | 1 | 2 }) {
  let id = useId()
  let { width, height, path } = shapes[shape]
  return (
    <div
      className={clsx(
        className,
        'relative flex aspect-[719/680] w-full grayscale',
      )}
    >
      <svg viewBox={`0 0 ${width} ${height}`} fill="none" className="h-full">
        <g clipPath={`url(#${id}-clip)`} className="group">
          <g className="origin-center scale-100 transition duration-500 motion-safe:group-hover:scale-105">
            <foreignObject width={width} height={height}>
              <Image
                alt=""
                className="w-full bg-neutral-100 object-cover"
                style={{ aspectRatio: `${width} / ${height}` }}
                {...props}
              />
            </foreignObject>
          </g>
          <use
            href={`#${id}-shape`}
            strokeWidth="2"
            className="stroke-neutral-950/10"
          />
        </g>
        <defs>
          <clipPath id={`${id}-clip`}>
            <path
              id={`${id}-shape`}
              d={path}
              fillRule="evenodd"
              clipRule="evenodd"
            />
          </clipPath>
        </defs>
      </svg>
    </div>
  )
}

================
File: src/components/sections/BlogPageIntro.tsx
================
import clsx from 'clsx'
import { Container } from '@/components/ui/Container'
import { FadeIn } from '@/components/ui/FadeIn'
import { PageIntro } from '@/types/global'
import BasicMarkdown from '../ui/BasicMarkdown'
import NextCloudinaryImage from '../images/ImageNextCloudinary'
import { Post } from '@/types/post'
import { formatDate } from '@/lib/helper'
import { Section } from '../ui/Section'
export function BlogPageIntroSections({
  eyebrow,
  title,
  content,
  cover,
  post,
  showCover = true,
}: PageIntro & { showCover?: boolean; post: Post }) {
  return (
    <Section>
      <FadeIn>
        <div className="grid gap-8">
          <div className="col-span-full">
            <h1>
              <span className="block font-display text-base font-semibold text-neutral-950">
                {formatDate(post.publishedAt, 'fr')}
              </span>
              <span className="sr-only"> - </span>
              <span className="mx-auto block max-w-5xl font-display text-5xl font-medium tracking-tight text-neutral-950 [text-wrap:balance] sm:text-6xl">
                {title}
              </span>
            </h1>
            <div className="mx-auto mt-6 max-w-3xl text-xl text-neutral-600">
              <BasicMarkdown>{content}</BasicMarkdown>
            </div>
            <div className="mt-4 flex items-center justify-center space-x-4 text-center">
              {post.author?.avatar && (
                <NextCloudinaryImage
                  alt={post.author.fullname}
                  src={post.author.avatar.url}
                  width={64}
                  height={64}
                  className="rounded-full bg-gray-100"
                />
              )}
              <div className="text-sm leading-6">
                <p className="font-semibold text-gray-900">
                  <span className="absolute inset-0" />
                  {post.author.fullname}
                </p>
                <p className="text-gray-600">{post.author.role}</p>
              </div>
            </div>
          </div>
          {showCover && cover && (
            <div className="col-span-full mx-auto">
              <NextCloudinaryImage
                src={cover.url}
                alt={cover.alternativeText}
                width={1200}
                height={600}
                className="rounded-md shadow-2xl ring-1 ring-gray-900/10"
              />
            </div>
          )}
        </div>
      </FadeIn>
    </Section>
  )
}

================
File: src/components/sections/ContactFooter.tsx
================
import { Button } from '@/components/elements/Button'
import { Container } from '@/components/ui/Container'
import { FadeIn } from '@/components/ui/FadeIn'
import { useTranslations } from 'next-intl'
export function ContactFooter() {
  const t = useTranslations('Contact')
  return (
    <Container className="mt-24">
      <FadeIn className="-mx-6 rounded-4xl bg-neutral-950 px-6 py-20 sm:mx-0 sm:py-32 md:px-12">
        <div className="mx-auto max-w-4xl">
          <div className="max-w-xl">
            <h2 className="font-display text-3xl font-medium text-white [text-wrap:balance] sm:text-4xl">
              {t('title')}
            </h2>
            <div className="mt-6 flex">
              <Button href="/contact" invert>
                {t('button_contact')}
              </Button>
            </div>
          </div>
        </div>
      </FadeIn>
    </Container>
  )
}

================
File: src/components/sections/dynamic/Contact/ContactSection.tsx
================
import React from 'react'
import Link from 'next/link'
import { Container } from '@/components/ui/Container'
import { FadeIn } from '@/components/ui/FadeIn'
import { SectionIntro } from '../../SectionIntro'
import { Button } from '@/components/elements/Button'
import { ContactForm } from '@/components/form/ContactForm'
import { Border } from '@/components/ui/Border'
import { ContactContent, ContactProps, Office } from '@/types/contact'
import Icon from '@/components/images/Icon'
import dynamicIconImports from 'lucide-react/dynamicIconImports'
import { useTranslations } from 'next-intl'
import { Section } from '@/components/ui/Section'
interface OfficesSectionProps {
  offices: Office[]
  className?: string
  invert?: boolean
}
const OfficesSection: React.FC<OfficesSectionProps> = ({
  offices,
  className,
  invert = false,
}) => (
  <ul role="list" className={className}>
    {offices.map((office) => (
      <li key={office.id}>
        <p
          className={invert ? 'text-white' : 'text-neutral-950'}
        >{`${office.city}, ${office.country}`}</p>
        <p className={invert ? 'text-neutral-300' : 'text-neutral-600'}>
          {office.address}
        </p>
      </li>
    ))}
  </ul>
)
const ContactDetails: React.FC<{ contactContent: ContactContent }> = ({
  contactContent,
}) => {
  const t = useTranslations('Contact')
  return (
    <FadeIn>
      {contactContent?.offices?.length > 0 && (
        <>
          <h2 className="font-display text-base font-semibold text-neutral-950">
            {t('offices')}
          </h2>
          <OfficesSection
            offices={contactContent.offices}
            className="mt-10 grid grid-cols-1 gap-8 sm:grid-cols-2"
          />
        </>
      )}
      {contactContent?.emails?.length > 0 && (
        <Border className="mt-16 pt-16">
          <h2 className="font-display text-base font-semibold text-neutral-950">
            {t('email_us')}
          </h2>
          <dl className="mt-6 grid grid-cols-1 gap-8 text-sm sm:grid-cols-2">
            {contactContent.emails.map(({ id, label, email }) => (
              <div key={id}>
                <dt className="font-semibold text-neutral-950">{label}</dt>
                <dd>
                  <Link
                    href={`mailto:${email}`}
                    className="text-neutral-600 hover:text-neutral-950"
                  >
                    {email}
                  </Link>
                </dd>
              </div>
            ))}
          </dl>
        </Border>
      )}
      {contactContent?.socials?.length > 0 && (
        <Border className="mt-16 pt-16">
          <h2 className="font-display text-base font-semibold text-neutral-950">
            {t('follow_us')}
          </h2>
          <ul className="mt-6 flex gap-x-10">
            {contactContent.socials.map((social) => (
              <li key={social.id}>
                <Link
                  href={social.url}
                  aria-label={social.name}
                  className="text-neutral-600 hover:text-neutral-950"
                  target="_blank"
                >
                  <Icon
                    name={social.icon as keyof typeof dynamicIconImports}
                    className="h-6 w-6"
                  />
                </Link>
              </li>
            ))}
          </ul>
        </Border>
      )}
    </FadeIn>
  )
}
const RenderContent: React.FC<ContactProps> = ({
  contactSection,
  designType,
}) => {
  switch (designType) {
    case 1:
      return (
        <Container className="mt-24 sm:mt-32 lg:mt-40">
          <FadeIn className="-mx-6 rounded-4xl bg-neutral-950 px-6 py-20 sm:mx-0 sm:py-32 md:px-12">
            <div className="mx-auto max-w-4xl">
              <div className="max-w-xl">
                <div className="mt-6 flex flex-wrap gap-4">
                  {contactSection?.buttons?.map((button) => (
                    <Button key={button.id} href={button.link} invert>
                      {button.text}
                    </Button>
                  ))}
                </div>
                {contactSection?.content?.offices?.length > 0 && (
                  <div className="mt-10 border-t border-white/10 pt-10">
                    <h3 className="font-display text-base font-semibold text-white">
                      Our offices
                    </h3>
                    <OfficesSection
                      offices={contactSection.content.offices}
                      invert
                      className="mt-6 grid grid-cols-1 gap-8 sm:grid-cols-2"
                    />
                  </div>
                )}
              </div>
            </div>
          </FadeIn>
        </Container>
      )
    default:
      return (
        <Container className="mt-24 sm:mt-32 lg:mt-40">
          <div className="grid grid-cols-1 gap-x-8 gap-y-24 lg:grid-cols-2">
            {contactSection.formEnabled && <ContactForm />}
            <ContactDetails contactContent={contactSection.content} />
          </div>
        </Container>
      )
  }
}
const ContactSection: React.FC<ContactProps> = ({
  contactSection,
  designType,
}) => {
  return (
    <Section>
      <SectionIntro {...contactSection.sectionIntro} />
      <RenderContent contactSection={contactSection} designType={designType} />
    </Section>
  )
}
export default ContactSection

================
File: src/components/sections/dynamic/Contact/Offices.tsx
================
import React from 'react'
import clsx from 'clsx'
import { Office } from '@/types/global'
function OfficeCard({ name, children, invert = false }: Office) {
  return (
    <address
      className={clsx(
        'text-sm not-italic',
        invert ? 'text-neutral-300' : 'text-neutral-600',
      )}
    >
      <strong className={invert ? 'text-white' : 'text-neutral-950'}>
        {name}
      </strong>
      <br />
      {children}
    </address>
  )
}
interface OfficeProps {
  id: number
  title: string
  content: string | null
}
interface OfficesProps extends React.ComponentPropsWithoutRef<'ul'> {
  offices: OfficeProps[]
  invert?: boolean
}
export function OfficesSection({
  offices,
  invert = false,
  ...props
}: OfficesProps) {
  return (
    <ul role="list" {...props}>
      {offices && offices.length > 0 ? (
        offices.map(({ id, title, content }) => (
          <li key={id}>
            <OfficeCard name={title} invert={invert}>
              {content ? (
                content.split('\n').map((line, idx) => (
                  <React.Fragment key={idx}>
                    {line}
                    <br />
                  </React.Fragment>
                ))
              ) : (
                <em>No address provided</em>
              )}
            </OfficeCard>
          </li>
        ))
      ) : (
        <li>No offices available</li>
      )}
    </ul>
  )
}
interface OfficeProps {
  id: number
  title: string
  content: string | null
}
interface OfficesProps extends React.ComponentPropsWithoutRef<'ul'> {
  offices: OfficeProps[]
  invert?: boolean
}

================
File: src/components/sections/dynamic/CTA/CTA.tsx
================
import React from 'react'
import { Container } from '@/components/ui/Container'
import { FadeIn } from '@/components/ui/FadeIn'
import BasicMarkdown from '@/components/ui/BasicMarkdown'
import { ButtonProps, PageIntro } from '@/types/global'
import Link from 'next/link'
import clsx from 'clsx'
import { Section } from '@/components/ui/Section'
interface CTAProps {
  designType?: Number
  ctaSection: {
    sectionIntro: PageIntro
    buttons?: ButtonProps[]
    align?: string
  }
}
const RenderContent: React.FC<CTAProps> = ({ ctaSection, designType }) => {
  switch (designType) {
    default:
      return (
        <div className="bg-white">
          <FadeIn>
            <div
              className={clsx('py-8', {
                'mx-auto text-center': ctaSection.align === 'center',
                'mr-auto text-left': ctaSection.align === 'left',
                'ml-auto text-right': ctaSection.align === 'right',
              })}
            >
              <h2 className="text-base font-semibold leading-7 text-primary-600">
                {ctaSection?.sectionIntro?.eyebrow}
              </h2>
              <p className="text-balance text-3xl font-semibold tracking-tight text-gray-900 sm:text-5xl">
                {ctaSection?.sectionIntro?.title}
              </p>
              <div
                className={clsx(
                  'mt-6 max-w-xl text-pretty text-lg/8 text-gray-600',
                  {
                    'mx-auto text-center': ctaSection.align === 'center',
                    'text-left': ctaSection.align === 'left',
                    'text-right': ctaSection.align === 'right',
                  },
                )}
              >
                <BasicMarkdown>
                  {ctaSection?.sectionIntro?.content}
                </BasicMarkdown>
              </div>
              {ctaSection?.buttons && ctaSection?.buttons?.length > 0 && (
                <div
                  className={clsx('mt-10 flex gap-x-6', {
                    'items-center justify-center':
                      ctaSection.align === 'center',
                    'items-start justify-start': ctaSection.align === 'left',
                    'items-end justify-end': ctaSection.align === 'right',
                  })}
                >
                  {ctaSection?.buttons?.map((button) => (
                    <Link
                      key={button.id}
                      href={button.link}
                      className={`${
                        button.type === 'primary'
                          ? 'rounded-md bg-primary-600 px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm hover:bg-primary-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-primary-600'
                          : 'text-sm font-semibold leading-6 text-gray-900'
                      }`}
                    >
                      {button.text}
                      {button.type === 'secondary' && (
                        <span aria-hidden="true">→</span>
                      )}
                    </Link>
                  ))}
                </div>
              )}
            </div>
          </FadeIn>
        </div>
      )
  }
}
const CTASection: React.FC<CTAProps> = ({ ctaSection, designType }) => {
  return (
    <Section>
      <RenderContent ctaSection={ctaSection} designType={designType} />
    </Section>
  )
}
export default CTASection

================
File: src/components/sections/dynamic/Culture/CultureCard/CultureCard1.tsx
================
import React from 'react'
import Icon from '@/components/images/Icon'
import { Culture } from '@/types/global'
import { getTranslations } from 'next-intl/server'
import { GridListItem } from '@/components/ui/GridList'
interface CultureCardProps {
  culture: Culture
}
const CultureCard1: React.FC<CultureCardProps> = async ({ culture }) => {
  const t = await getTranslations('Culture')
  return (
    <>
      <GridListItem key={culture.id} title={culture.title} invert>
        {culture.content}
      </GridListItem>
    </>
  )
}
export default CultureCard1

================
File: src/components/sections/dynamic/Culture/CultureSection.tsx
================
import React from 'react'
import { Culture } from '@/types/global'
import { PageIntro } from '@/types/global'
import { Container } from '@/components/ui/Container'
import { FadeIn } from '@/components/ui/FadeIn'
import { SectionIntro } from '../../SectionIntro'
import CultureCard1 from './CultureCard/CultureCard1'
import { GridList } from '@/components/ui/GridList'
import { Section } from '@/components/ui/Section'
interface CulturesProps {
  culturesSection: { sectionIntro: PageIntro } & { values: Culture[] }
  designType: Number
}
interface RenderContentProps {
  cultures: Culture[]
  sectionIntro: PageIntro
  designType?: Number
}
const RenderContent: React.FC<RenderContentProps> = ({
  cultures,
  sectionIntro,
  designType,
}) => {
  switch (designType) {
    default:
      return (
        <Section>
          <SectionIntro {...sectionIntro} />
          <GridList>
            {cultures.map((culture: Culture) => (
              <CultureCard1 key={culture.id} culture={culture} />
            ))}
          </GridList>
        </Section>
      )
  }
}
const CultureSection: React.FC<CulturesProps> = async ({
  culturesSection,
  designType,
}) => {
  return (
    <Section className="mt-24 rounded-4xl bg-primary-800 py-16 sm:mt-32 lg:mt-40 lg:py-32">
      <RenderContent
        cultures={
          culturesSection.values.length > 0 ? culturesSection.values : []
        }
        sectionIntro={culturesSection.sectionIntro}
        designType={designType}
      />
    </Section>
  )
}
export default CultureSection

================
File: src/components/sections/dynamic/Features/FeaturesSection.tsx
================
import React from 'react'
import { PageIntro } from '@/types/global'
import BasicMarkdown from '@/components/ui/BasicMarkdown'
import Icon from '@/components/images/Icon'
import { Feature } from '@/types/feature'
import { Container } from '@/components/ui/Container'
import { FadeIn } from '@/components/ui/FadeIn'
import { SectionIntro } from '../../SectionIntro'
import { Section } from '@/components/ui/Section'
interface FeaturesProps {
  featuresSection: { sectionIntro: PageIntro } & { features: Feature[] }
  designType: Number
}
interface RenderContentProps {
  features: Feature[]
  sectionIntro: PageIntro
  designType?: Number
}
const RenderContent: React.FC<RenderContentProps> = ({
  features,
  sectionIntro,
  designType,
}) => {
  switch (designType) {
    default:
      return (
        <>
          <FadeIn>
            <SectionIntro {...sectionIntro} />
            <dl className="mt-16 grid max-w-xl grid-cols-1 gap-x-8 gap-y-10 lg:max-w-none lg:grid-cols-2 lg:gap-y-16">
              {features.map((feature) => (
                <div key={feature.name} className="relative pl-16">
                  <dt className="text-base font-semibold leading-7 text-gray-900">
                    <div className="absolute left-0 top-0 flex h-10 w-10 items-center justify-center rounded-lg bg-primary-600">
                      <Icon
                        className="h-6 w-6 text-white"
                        name={feature.classIcon}
                      />
                    </div>
                    {feature.name}
                  </dt>
                  <dd className="mt-2 text-base leading-7 text-gray-600">
                    <BasicMarkdown>{feature.content}</BasicMarkdown>
                  </dd>
                </div>
              ))}
            </dl>
          </FadeIn>
        </>
      )
  }
}
const FeaturesSection: React.FC<FeaturesProps> = ({
  featuresSection,
  designType,
}) => {
  return (
    <Section>
      <RenderContent
        features={featuresSection?.features || []}
        sectionIntro={featuresSection.sectionIntro}
        designType={designType}
      />
    </Section>
  )
}
export default FeaturesSection

================
File: src/components/sections/dynamic/Hero/HeroSection.tsx
================
'use client'
import React from 'react'
import Link from 'next/link'
import { ChevronRightIcon } from 'lucide-react'
import clsx from 'clsx'
import { Container } from '@/components/ui/Container'
import { FadeIn } from '@/components/ui/FadeIn'
import { Section } from '@/components/ui/Section'
import NextCloudinaryImage from '@/components/images/ImageNextCloudinary'
import { ButtonProps, MediaItem, PageIntro } from '@/types/global'
import { SectionIntro } from '../../SectionIntro'
interface HeroProps {
  designType?: Number
  heroSection: {
    sectionIntro: PageIntro
    logo?: MediaItem
    buttons?: ButtonProps[]
    badge_text?: string
    version_text?: string
    embedVideo?: string
  }
}
const HeroButton = ({ button }: { button: ButtonProps }) => (
  <Link
    href={button.link}
    className={clsx(
      button.type === 'primary'
        ? 'rounded-md bg-primary-600 px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm hover:bg-primary-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-primary-600'
        : 'text-sm font-semibold leading-6 text-gray-900',
    )}
  >
    {button.text}
    {button.type === 'secondary' && <span aria-hidden="true">→</span>}
  </Link>
)
const GradientDecoration = () => (
  <>
    <div
      aria-hidden="true"
      className="absolute inset-x-0 -top-40 -z-10 transform-gpu overflow-hidden blur-3xl sm:-top-80"
    >
      <div
        style={{
          clipPath:
            'polygon(74.1% 44.1%, 100% 61.6%, 97.5% 26.9%, 85.5% 0.1%, 80.7% 2%, 72.5% 32.5%, 60.2% 62.4%, 52.4% 68.1%, 47.5% 58.3%, 45.2% 34.5%, 27.5% 76.7%, 0.1% 64.9%, 17.9% 100%, 27.6% 76.8%, 76.1% 97.7%, 74.1% 44.1%)',
        }}
        className="relative left-[calc(50%-11rem)] aspect-[1155/678] w-[36.125rem] -translate-x-1/2 rotate-[30deg] bg-gradient-to-tr from-[#ff80b5] to-[#9089fc] opacity-30 sm:left-[calc(50%-30rem)] sm:w-[72.1875rem]"
      />
    </div>
    <div
      aria-hidden="true"
      className="absolute inset-x-0 top-[calc(100%-13rem)] -z-10 transform-gpu overflow-hidden blur-3xl sm:top-[calc(100%-30rem)]"
    >
      <div
        style={{
          clipPath:
            'polygon(74.1% 44.1%, 100% 61.6%, 97.5% 26.9%, 85.5% 0.1%, 80.7% 2%, 72.5% 32.5%, 60.2% 62.4%, 52.4% 68.1%, 47.5% 58.3%, 45.2% 34.5%, 27.5% 76.7%, 0.1% 64.9%, 17.9% 100%, 27.6% 76.8%, 76.1% 97.7%, 74.1% 44.1%)',
        }}
        className="relative left-[calc(50%+3rem)] aspect-[1155/678] w-[36.125rem] -translate-x-1/2 bg-gradient-to-tr from-[#ff80b5] to-[#9089fc] opacity-30 sm:left-[calc(50%+36rem)] sm:w-[72.1875rem]"
      />
    </div>
  </>
)
const CenteredHero = ({ heroSection }: HeroProps) => (
  <div className="relative isolate px-6 pt-14 lg:px-8">
    <GradientDecoration />
    <div className="mx-auto max-w-2xl py-32 sm:py-48 lg:py-56">
      <div className="text-center">
        <SectionIntro
          {...heroSection.sectionIntro}
          embedVideo={heroSection?.sectionIntro?.embedVideo}
          centered
        />
        {heroSection.buttons && heroSection.buttons.length > 0 && (
          <div className="mt-10 flex items-center justify-center gap-x-6">
            {heroSection.buttons.map((button) => (
              <HeroButton key={button.id} button={button} />
            ))}
          </div>
        )}
      </div>
    </div>
  </div>
)
const SplitHero = ({ heroSection }: HeroProps) => (
  <div className="relative bg-white">
    <div className="mx-auto max-w-7xl lg:grid lg:grid-cols-12 lg:gap-x-8 lg:px-8">
      <div className="px-6 pb-24 pt-10 sm:pb-32 lg:col-span-7 lg:px-0 lg:pb-48 lg:pt-40 xl:col-span-6">
        <Container>
          <FadeIn>
            <div className="mx-auto max-w-lg lg:mx-0">
              {heroSection.logo && (
                <NextCloudinaryImage
                  src={heroSection.logo.url}
                  alt={heroSection.logo.alternativeText}
                  width={124}
                  height={48}
                  className="my-8"
                />
              )}
              <SectionIntro {...heroSection.sectionIntro} />
              {heroSection.buttons && heroSection.buttons.length > 0 && (
                <div className="mt-10 flex items-center gap-x-6">
                  {heroSection.buttons.map((button) => (
                    <HeroButton key={button.id} button={button} />
                  ))}
                </div>
              )}
            </div>
          </FadeIn>
        </Container>
      </div>
      {
}
    </div>
  </div>
)
const DefaultHero = ({ heroSection }: HeroProps) => (
  <div className="relative isolate overflow-hidden bg-white">
    <svg
      aria-hidden="true"
      className="absolute inset-0 -z-10 h-full w-full stroke-gray-200 [mask-image:radial-gradient(100%_100%_at_top_right,white,transparent)]"
    >
      <defs>
        <pattern
          x="50%"
          y={-1}
          id="hero-pattern"
          width={200}
          height={200}
          patternUnits="userSpaceOnUse"
        >
          <path d="M.5 200V.5H200" fill="none" />
        </pattern>
      </defs>
      <rect
        fill="url(#hero-pattern)"
        width="100%"
        height="100%"
        strokeWidth={0}
      />
    </svg>
    <Container>
      <FadeIn>
        <div className="mx-auto max-w-7xl px-6 pb-24 pt-10 sm:pb-32 lg:flex lg:px-8 lg:py-40">
          <div className="mx-auto max-w-2xl lg:mx-0 lg:flex-shrink-0 lg:pt-8">
            {heroSection.logo && (
              <NextCloudinaryImage
                src={heroSection.logo.url}
                alt={heroSection.logo.alternativeText}
                width={124}
                height={48}
                className="my-8"
              />
            )}
            {(heroSection.badge_text || heroSection.version_text) && (
              <div className="mt-24 sm:mt-32 lg:mt-16">
                <div className="inline-flex space-x-6">
                  {heroSection.badge_text && (
                    <span className="rounded-full bg-primary-600/10 px-3 py-1 text-sm font-semibold leading-6 text-primary-600 ring-1 ring-inset ring-primary-600/10">
                      {heroSection.badge_text}
                    </span>
                  )}
                  {heroSection.version_text && (
                    <span className="inline-flex items-center space-x-2 text-sm font-medium leading-6 text-gray-600">
                      <span>{heroSection.version_text}</span>
                      <ChevronRightIcon
                        className="h-5 w-5 text-gray-400"
                        aria-hidden="true"
                      />
                    </span>
                  )}
                </div>
              </div>
            )}
            <SectionIntro {...heroSection.sectionIntro} />
            {heroSection.buttons && heroSection.buttons.length > 0 && (
              <div className="mt-10 flex items-center gap-x-6">
                {heroSection.buttons.map((button) => (
                  <HeroButton key={button.id} button={button} />
                ))}
              </div>
            )}
          </div>
        </div>
      </FadeIn>
    </Container>
  </div>
)
const HeroSection: React.FC<HeroProps> = ({ heroSection, designType }) => {
  return (
    <Section>
      {(() => {
        switch (designType) {
          case 1:
            return <CenteredHero heroSection={heroSection} />
          case 2:
            return <SplitHero heroSection={heroSection} />
          case 3:
            return (
              <div className="relative isolate pt-14">
                <GradientDecoration />
                <div className="items-center justify-center py-24 sm:py-32 lg:pb-40">
                  <div className="mx-auto max-w-7xl px-6 lg:px-8">
                    <SectionIntro {...heroSection.sectionIntro} centered />
                    {heroSection.buttons && heroSection.buttons.length > 0 && (
                      <div className="mt-10 flex items-center justify-center gap-x-6">
                        {heroSection.buttons.map((button) => (
                          <HeroButton key={button.id} button={button} />
                        ))}
                      </div>
                    )}
                  </div>
                </div>
              </div>
            )
          case 4:
            return (
              <SectionIntro
                {...heroSection.sectionIntro}
                embedVideo={heroSection?.sectionIntro?.embedVideo}
              />
            )
          default:
            return <DefaultHero heroSection={heroSection} />
        }
      })()}
    </Section>
  )
}
export default HeroSection

================
File: src/components/sections/dynamic/PageIntro/PageIntroSection.tsx
================
import React from 'react'
import { PageIntro } from '@/types/global'
import { PageIntroSections } from '../../PageIntro'
import { Section } from '@/components/ui/Section'
interface PageIntroProps {
  pageIntroSection: PageIntro
  designType: Number
}
const PageIntroSection: React.FC<PageIntroProps> = async ({
  pageIntroSection,
  designType,
}) => {
  try {
  } catch (error) {
    console.error('Failed to load services:', error)
  }
  return (
    <Section>
      <PageIntroSections {...pageIntroSection} />
    </Section>
  )
}
export default PageIntroSection

================
File: src/components/sections/dynamic/Posts/PostCard/PostCard1.tsx
================
import NextCloudinaryImage from '@/components/images/ImageNextCloudinary'
import { formatDate, truncateWithEllipses } from '@/lib/helper'
import { Post } from '@/types/post'
import Link from 'next/link'
interface PostCard1Props {
  post: Post
}
const PostCard1: React.FC<PostCard1Props> = ({ post }) => {
  return (
    <article
      key={post.slug}
      className="flex flex-col items-start justify-start"
    >
      <div className="relative w-full">
        {post?.pageIntro?.cover?.url && (
          <NextCloudinaryImage
            alt={post.pageIntro.title}
            src={post.pageIntro.cover.url}
            width={300}
            height={200}
            className="aspect-[16/9] w-full rounded-2xl bg-gray-100 object-cover sm:aspect-[2/1] lg:aspect-[3/2]"
          />
        )}
        <div className="absolute inset-0 rounded-2xl ring-1 ring-inset ring-gray-900/10" />
      </div>
      <div className="max-w-xl">
        <div className="mt-4 flex items-center gap-x-4 text-xs">
          <time className="text-gray-500">
            {formatDate(post.publishedAt, 'fr')}
          </time>
          {
}
        </div>
        {post.pageIntro && (
          <div className="group relative">
            <h3 className="mt-3 text-lg font-semibold leading-6 text-gray-900 group-hover:text-gray-600">
              <Link href={`/blog/${post.slug}`}>
                <span className="absolute inset-0" />
                {post.pageIntro.title}
              </Link>
            </h3>
            {post.pageIntro.content && (
              <p className="mt-5 line-clamp-3 text-sm leading-6 text-gray-600">
                {truncateWithEllipses(post.pageIntro.content, 150)}
              </p>
            )}
          </div>
        )}
        <div className="relative mt-4 flex items-center gap-x-4">
          {post.author?.avatar && (
            <NextCloudinaryImage
              alt={post.author?.fullname}
              src={post.author.avatar.url}
              width={48}
              height={48}
              className="rounded-full bg-gray-100"
            />
          )}
          <div className="text-sm leading-6">
            <p className="font-semibold text-gray-900">
              <span className="absolute inset-0" />
              {post.author?.fullname}
            </p>
            <p className="text-gray-600">{post.author?.title}</p>
          </div>
        </div>
      </div>
    </article>
  )
}
export default PostCard1

================
File: src/components/sections/dynamic/Posts/PostCard/PostCard2.tsx
================
import NextCloudinaryImage from '@/components/images/ImageNextCloudinary'
import BasicMarkdown from '@/components/ui/BasicMarkdown'
import { formatDate, truncateWithEllipses } from '@/lib/helper'
import { Post } from '@/types/post'
import Link from 'next/link'
interface PostCard2Props {
  post: Post
}
const PostCard2: React.FC<PostCard2Props> = ({ post }) => {
  return (
    <article key={post.slug} className="mb-24 flex flex-col gap-8 lg:flex-row">
      <div>
        {post?.pageIntro?.cover?.url && (
          <NextCloudinaryImage
            src={post.pageIntro.cover.url}
            alt={post.pageIntro.title}
            width={320}
            height={320}
            className="inset-0 rounded-2xl object-cover"
          />
        )}
      </div>
      <div>
        <div className="flex items-start gap-x-4 text-xs">
          <time className="text-gray-500">
            {formatDate(post.publishedAt, 'fr')}
          </time>
        </div>
        <div className="group relative max-w-xl">
          <h3 className="mt-3 text-lg font-semibold leading-6 text-gray-900 group-hover:text-gray-600">
            <Link href={`/blog/${post.slug}`}>
              <span className="absolute inset-0" />
              {post.pageIntro.title}
            </Link>
          </h3>
          {post?.pageIntro?.content && (
            <div className="typography">
              <BasicMarkdown>
                {truncateWithEllipses(post.pageIntro.content, 150)}
              </BasicMarkdown>
            </div>
          )}
          {post?.author && (
            <div className="mt-6 flex items-start">
              {post?.author?.avatar && (
                <NextCloudinaryImage
                  src={post.author.avatar.url}
                  alt={post.author.fullname}
                  width={50}
                  height={50}
                  className="h-12 w-12 rounded-full object-cover"
                />
              )}
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-900">
                  {post.author.fullname}
                </p>
                <p className="text-sm text-gray-500">{post.author.title}</p>
              </div>
            </div>
          )}
        </div>
        <div className="mt-6 border-b border-gray-200"></div>
      </div>
    </article>
  )
}
export default PostCard2

================
File: src/components/sections/dynamic/Posts/PostsSection.tsx
================
'use client'
import React from 'react'
import { Post } from '@/types/post'
import { SectionIntro } from '../../SectionIntro'
import { Container } from '@/components/ui/Container'
import { FadeIn } from '@/components/ui/FadeIn'
import { fetchPosts } from '@/request/fetch'
import PostCard1 from '../Posts/PostCard/PostCard1'
import PostCard2 from '../Posts/PostCard/PostCard2'
import { PageIntro, Pagination } from '@/types/global'
import { Section } from '@/components/ui/Section'
import Fetcher from '@/request/Fetcher'
import { url } from 'inspector'
import PaginationMain from '../../Pagination'
interface BlogProps {
  postsSection: { sectionIntro: PageIntro } & { posts: Post[] } & {
    pagination: Pagination
  }
  designType: Number
}
interface RenderContentProps {
  posts: Post[]
  sectionIntro: PageIntro
  designType?: Number
}
const RenderContent: React.FC<RenderContentProps> = ({
  posts,
  sectionIntro,
  designType,
}) => {
  switch (designType) {
    case 1:
      return (
        <>
          <SectionIntro {...sectionIntro} />
          <FadeIn>
            <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 md:grid-cols-3 xl:grid-cols-4">
              {posts.map((post: Post) => (
                <PostCard1 key={post.id} post={post} />
              ))}
            </div>
          </FadeIn>
        </>
      )
    default:
      return (
        <>
          <SectionIntro {...sectionIntro} />
          <FadeIn>
            {posts.map((post: Post) => (
              <PostCard2 key={post.id} post={post} />
            ))}
          </FadeIn>
        </>
      )
  }
}
const PostsSection: React.FC<BlogProps> = ({ postsSection, designType }) => {
  try {
  } catch (error) {
    console.error('Failed to load posts:', error)
  }
  const url = '/posts'
  return (
    <Section>
      {postsSection?.posts && postsSection?.posts?.length > 0 ? (
        <div>
          <RenderContent
            posts={postsSection?.posts}
            sectionIntro={postsSection.sectionIntro}
            designType={designType}
          />
        </div>
      ) : (
        <Fetcher url={url} paginationMode={postsSection?.pagination?.value}>
          {({ data, currentPage, totalPages, goToPage }) => (
            <div>
              <RenderContent
                posts={data.data}
                sectionIntro={postsSection.sectionIntro}
                designType={designType}
              />
              {postsSection?.pagination?.value === 'off' ? null : (
                <PaginationMain
                  currentPage={currentPage}
                  totalPages={totalPages}
                  goToPage={goToPage}
                />
              )}
            </div>
          )}
        </Fetcher>
      )}
    </Section>
  )
}
export default PostsSection

================
File: src/components/sections/dynamic/PricingSection/PricingSection.tsx
================
import React from 'react'
import { Container } from '@/components/ui/Container'
import { FadeIn } from '@/components/ui/FadeIn'
import BasicMarkdown from '@/components/ui/BasicMarkdown'
import { Check, X } from 'lucide-react'
import { PageIntro } from '@/types/global'
import { useTranslations } from 'next-intl'
import { Section } from '@/components/ui/Section'
export interface PricingFeature {
  id: number
  text: string
  included: boolean
}
export interface PricingCard {
  id: number
  name: string
  link: string
  price: string
  frequency: string
  content: string
  features: PricingFeature[]
  popular?: boolean
}
export interface PricingProps {
  designType?: Number
  pricingSection: {
    sectionIntro: PageIntro
    cards: PricingCard[]
  }
}
const classNames = (...classes: string[]) => {
  return classes.filter(Boolean).join(' ')
}
const RenderContent: React.FC<PricingProps> = ({
  pricingSection,
  designType,
}) => {
  const t = useTranslations('Pricing')
  switch (designType) {
    default:
      return (
        <>
          <FadeIn>
            <div className="mx-auto max-w-7xl px-6 lg:px-8">
              <div className="mx-auto max-w-4xl text-center">
                <h2 className="text-base font-semibold leading-7 text-primary-600">
                  {pricingSection?.sectionIntro?.eyebrow}
                </h2>
                <p className="text-balance text-3xl font-semibold tracking-tight text-gray-900 sm:text-5xl">
                  {pricingSection?.sectionIntro?.title}
                </p>
                <div className="mx-auto mt-6 max-w-2xl text-pretty text-center text-lg font-medium text-gray-600 sm:text-xl/8">
                  <BasicMarkdown>
                    {pricingSection?.sectionIntro?.content}
                  </BasicMarkdown>
                </div>
              </div>
              <div className="isolate mx-auto grid max-w-md grid-cols-1 gap-y-8 lg:mx-0 lg:max-w-none lg:grid-cols-3">
                {pricingSection?.cards.map((card, cardIdx) => (
                  <div
                    key={card.id}
                    className={classNames(
                      card?.popular ? 'lg:z-10 lg:rounded-b-none' : 'lg:mt-8',
                      cardIdx === 0 ? 'lg:rounded-r-none' : '',
                      cardIdx === pricingSection?.cards?.length - 1
                        ? 'lg:rounded-l-none'
                        : '',
                      'flex flex-col justify-between rounded-3xl bg-white p-8 ring-1 ring-gray-200 xl:p-10',
                    )}
                  >
                    <div>
                      <div className="flex items-center justify-between gap-x-4">
                        <h3
                          id={`tier-${card.id}`}
                          className={classNames(
                            card.popular ? 'text-primary-600' : 'text-gray-900',
                            'text-lg font-semibold leading-8',
                          )}
                        >
                          {card.name}
                        </h3>
                        {card.popular && (
                          <p className="rounded-full bg-primary-600/10 px-2.5 py-1 text-xs font-semibold leading-5 text-primary-600">
                            {t('most_popular')}
                          </p>
                        )}
                      </div>
                      <div className="mt-4 text-sm leading-6 text-gray-600">
                        <BasicMarkdown>{card.content}</BasicMarkdown>
                      </div>
                      <p className="mt-6 flex items-baseline gap-x-1">
                        <span className="text-4xl font-semibold tracking-tight text-gray-900">
                          {card.price}
                        </span>
                        <span className="text-sm font-semibold leading-6 text-gray-600">
                          /{card.frequency}
                        </span>
                      </p>
                      <ul
                        role="list"
                        className="mt-8 space-y-3 text-sm leading-6 text-gray-600"
                      >
                        {card.features.map((feature) => (
                          <li key={feature.id} className="flex gap-x-3">
                            {feature.included ? (
                              <Check className="h-6 w-5 flex-none text-primary-600" />
                            ) : (
                              <X className="h-6 w-5 flex-none text-gray-400" />
                            )}
                            {feature.text}
                          </li>
                        ))}
                      </ul>
                    </div>
                    {card.link && (
                      <a
                        href={card.link}
                        aria-describedby={`tier-${card.id}`}
                        className={classNames(
                          card.popular
                            ? 'bg-primary-600 text-white shadow-sm hover:bg-primary-500'
                            : 'text-primary-600 ring-1 ring-inset ring-primary-200 hover:ring-primary-300',
                          'mt-8 block rounded-md px-3 py-2 text-center text-sm font-semibold leading-6 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-primary-600',
                        )}
                      >
                        {t('btn_pricing')}
                      </a>
                    )}
                  </div>
                ))}
              </div>
            </div>
          </FadeIn>
        </>
      )
  }
}
const PricingSection: React.FC<PricingProps> = ({
  pricingSection,
  designType,
}) => {
  return (
    <Section>
      <RenderContent pricingSection={pricingSection} designType={designType} />
    </Section>
  )
}
export default PricingSection

================
File: src/components/sections/dynamic/Projects/ProjectCard/ProjectCard1.tsx
================
import React from 'react'
import { FadeIn } from '@/components/ui/FadeIn'
import { Button } from '@/components/ui/button'
import { Project } from '@/types/project'
import { getTranslations } from 'next-intl/server'
import Link from 'next/link'
import { truncateWithEllipses } from '@/lib/helper'
import NextCloudinaryImage from '@/components/images/ImageNextCloudinary'
import BasicMarkdown from '@/components/ui/BasicMarkdown'
import { useTranslations } from 'next-intl'
interface ProjectCardProps {
  project: Project
}
const ProjectCard1: React.FC<ProjectCardProps> = ({ project }) => {
  const t = useTranslations('Project')
  return (
    <FadeIn
      key={project.id}
      className="flex"
      style={{ opacity: 1, transform: 'none' }}
    >
      <Link href={`/projects/${project.slug}`}>
        <article className="relative flex w-full flex-col rounded-3xl p-6 ring-1 ring-neutral-950/5 transition hover:bg-neutral-50 sm:p-8">
          <div className="flex items-center">
            <div>
              {project?.logo?.url && (
                <NextCloudinaryImage
                  src={project?.logo?.url}
                  alt={project.client}
                  width={100}
                  height={20}
                  className="mr-3"
                />
              )}
            </div>
          </div>
          {project.pageIntro.cover && (
            <div className="my-6">
              {project?.pageIntro?.cover.url && (
                <NextCloudinaryImage
                  src={project?.pageIntro?.cover.url}
                  alt={project?.pageIntro?.title}
                  width={600}
                  height={500}
                  className="rounded-md"
                  crop="fill"
                />
              )}
            </div>
          )}
          <p className="mt-6 flex gap-x-2 text-sm text-neutral-950">
            <time dateTime={project.year} className="font-semibold">
              {project.year}
            </time>
            <span className="text-neutral-300" aria-hidden="true">
              /
            </span>
            <span>{project.service}</span>
          </p>
          <p className="mt-6 font-display text-2xl font-semibold text-neutral-950">
            {project?.pageIntro?.title}
          </p>
          <div className="mt-4 text-base text-neutral-600">
            <BasicMarkdown>
              {truncateWithEllipses(project?.pageIntro?.content, 75)}
            </BasicMarkdown>
          </div>
          <div className="mt-6">
            <Button variant="primary">{t('view_more')}</Button>
          </div>
        </article>
      </Link>
    </FadeIn>
  )
}
export default ProjectCard1

================
File: src/components/sections/dynamic/Projects/ProjectsSection.tsx
================
'use client'
import React from 'react'
import { Project } from '@/types/project'
import { PageIntro, Pagination } from '@/types/global'
import { fetchProjects } from '@/request/fetch'
import { Container } from '@/components/ui/Container'
import { FadeInStagger } from '@/components/ui/FadeIn'
import { FadeIn } from '@/components/ui/FadeIn'
import { SectionIntro } from '../../SectionIntro'
import ProjectCard1 from './ProjectCard/ProjectCard1'
import { Section } from '@/components/ui/Section'
import Fetcher from '@/request/Fetcher'
import PaginationMain from '../../Pagination'
interface ProjectsProps {
  projectsSection: { sectionIntro: PageIntro } & { projects: Project[] } & {
    pagination: Pagination
  }
  designType: number
}
interface RenderContentProps {
  projects: Project[]
  sectionIntro: PageIntro
  designType?: number
}
const RenderContent: React.FC<RenderContentProps> = ({
  projects,
  sectionIntro,
  designType,
}) => {
  switch (designType) {
    default:
      return (
        <>
          <SectionIntro {...sectionIntro} />
          <FadeInStagger className="grid grid-cols-1 gap-8 lg:grid-cols-3">
            {projects.map((project: Project) => (
              <FadeIn key={project.id}>
                <ProjectCard1 key={project.id} project={project} />
              </FadeIn>
            ))}
          </FadeInStagger>
        </>
      )
  }
}
const ProjectsSection: React.FC<ProjectsProps> = ({
  projectsSection,
  designType,
}) => {
  const url = '/projects'
  return (
    <Section>
      {projectsSection?.projects && projectsSection?.projects?.length > 0 ? (
        <div>
          <RenderContent
            projects={projectsSection?.projects}
            sectionIntro={projectsSection.sectionIntro}
            designType={designType}
          />
        </div>
      ) : (
        <Fetcher url={url} paginationMode={projectsSection?.pagination?.value}>
          {({ data, currentPage, totalPages, goToPage }) => {
            return (
              <div>
                <RenderContent
                  projects={data.data}
                  sectionIntro={projectsSection.sectionIntro}
                  designType={designType}
                />
                {projectsSection?.pagination?.value === 'off' ? null : (
                  <PaginationMain
                    currentPage={currentPage}
                    totalPages={totalPages}
                    goToPage={goToPage}
                  />
                )}
              </div>
            )
          }}
        </Fetcher>
      )}
    </Section>
  )
}
export default ProjectsSection

================
File: src/components/sections/dynamic/References/ClientCard/ClientCard1.tsx
================
import React from 'react'
import Icon from '@/components/images/Icon'
import { Client } from '@/types/client'
import { getTranslations } from 'next-intl/server'
import Link from 'next/link'
import { truncateWithEllipses } from '@/lib/helper'
import NextCloudinaryImage from '@/components/images/ImageNextCloudinary'
import BasicMarkdown from '@/components/ui/BasicMarkdown'
import { FadeIn } from '@/components/ui/FadeIn'
interface ReferenceCardProps {
  client: Client
}
const ClientCard1: React.FC<ReferenceCardProps> = async ({ client }) => {
  const t = await getTranslations('Reference')
  return (
    <FadeIn className="overflow-hidden">
      {client?.logo && (
        <NextCloudinaryImage
          width={160}
          height={80}
          alt={client?.logo?.alternativeText}
          src={`${client?.logo?.url}`}
          crop="fit"
        />
      )}
    </FadeIn>
  )
}
export default ClientCard1

================
File: src/components/sections/dynamic/References/ReferenceSection.tsx
================
import React from 'react'
import { Client } from '@/types/client'
import { PageIntro } from '@/types/global'
import { fetchClients } from '@/request/fetch'
import { Border } from '@/components/ui/Border'
import { Container } from '@/components/ui/Container'
import { FadeIn, FadeInStagger } from '@/components/ui/FadeIn'
import { SectionIntro } from '../../SectionIntro'
import ClientCard1 from './ClientCard/ClientCard1'
import { Section } from '@/components/ui/Section'
interface ReferenceProps {
  referenceSection: { sectionIntro: PageIntro } & { clients: Client[] }
  designType: Number
}
interface RenderContentProps {
  clients: Client[]
  sectionIntro: PageIntro
  designType?: Number
}
const RenderContent: React.FC<RenderContentProps> = ({
  clients,
  sectionIntro,
  designType,
}) => {
  switch (designType) {
    default:
      return (
        <Container className="mt-24 sm:mt-32 lg:mt-40">
          <SectionIntro {...sectionIntro} />
          <FadeInStagger faster>
            <Border className="mb-12" as={FadeIn} />
            <ul
              role="list"
              className="grid grid-cols-2 gap-x-8 gap-y-12 pt-12 sm:grid-cols-3 lg:grid-cols-4"
            >
              {clients.map((client: Client) => (
                <li key={client.id} className="group">
                  <ClientCard1 key={client.id} client={client} />
                </li>
              ))}
            </ul>
          </FadeInStagger>
        </Container>
      )
  }
}
const ReferenceSection: React.FC<ReferenceProps> = async ({
  referenceSection,
  designType,
}) => {
  let clients: Client[] | null = null
  try {
    clients = await fetchClients()
  } catch (error) {
    console.error('Failed to load services:', error)
  }
  return (
    <Section>
      <RenderContent
        clients={
          referenceSection.clients.length > 0
            ? referenceSection.clients
            : clients || []
        }
        sectionIntro={referenceSection.sectionIntro}
        designType={designType}
      />
    </Section>
  )
}
export default ReferenceSection

================
File: src/components/sections/dynamic/Services/ServiceCard/ServiceCard1.tsx
================
import React from 'react'
import Icon from '@/components/images/Icon'
import { Service } from '@/types/service'
import { getTranslations } from 'next-intl/server'
import Link from 'next/link'
import { truncateWithEllipses } from '@/lib/helper'
import NextCloudinaryImage from '@/components/images/ImageNextCloudinary'
import BasicMarkdown from '@/components/ui/BasicMarkdown'
interface ServiceCardProps {
  service: Service
}
const ServiceCard1: React.FC<ServiceCardProps> = async ({ service }) => {
  const t = await getTranslations('Service')
  return (
    <div key={service.id} className="flex flex-col">
      <dt className="items-top flex min-h-20 gap-x-3 text-xl font-bold leading-7 text-gray-900">
        <div className="text-primary-600">
          <Icon size={48} name={service.classIcon as any} />
        </div>
        {service.pageIntro.title}
      </dt>
      <dd className="mt-1 flex flex-auto flex-col text-lg leading-6 text-gray-600">
        <BasicMarkdown>
          {truncateWithEllipses(service.pageIntro.content, 150)}
        </BasicMarkdown>
        {}
        <Link
          href={`/services/${service.slug}`}
          className="mt-4 text-sm font-semibold leading-6 text-primary-600"
        >
          {t('view_more')} <span aria-hidden="true">→</span>
        </Link>
      </dd>
    </div>
  )
}
export default ServiceCard1

================
File: src/components/sections/dynamic/Services/ServiceSection.tsx
================
import React from 'react'
import { Service } from '@/types/service'
import { PageIntro } from '@/types/global'
import { fetchServices } from '@/request/fetch'
import { Container } from '@/components/ui/Container'
import { FadeIn } from '@/components/ui/FadeIn'
import { SectionIntro } from '../../SectionIntro'
import ServiceCard1 from './ServiceCard/ServiceCard1'
import { Section } from '@/components/ui/Section'
interface ServicesProps {
  servicesSection: { sectionIntro: PageIntro } & { our_services: Service[] }
  designType: Number
}
interface RenderContentProps {
  services: Service[]
  sectionIntro: PageIntro
  designType?: Number
}
const RenderContent: React.FC<RenderContentProps> = ({
  services,
  sectionIntro,
  designType,
}) => {
  switch (designType) {
    default:
      return (
        <Container>
          <SectionIntro {...sectionIntro} />
          <FadeIn>
            <div className="grid grid-cols-1 gap-8 lg:grid-cols-2">
              {services.map((service: Service) => (
                <ServiceCard1 key={service.id} service={service} />
              ))}
            </div>
          </FadeIn>
        </Container>
      )
  }
}
const ServiceSection: React.FC<ServicesProps> = async ({
  servicesSection,
  designType,
}) => {
  let services: Service[] | null = null
  try {
    services = await fetchServices()
  } catch (error) {
    console.error('Failed to load services:', error)
  }
  return (
    <Section>
      <RenderContent
        services={
          servicesSection.our_services.length > 0
            ? servicesSection.our_services
            : services || []
        }
        sectionIntro={servicesSection.sectionIntro}
        designType={designType}
      />
    </Section>
  )
}
export default ServiceSection

================
File: src/components/sections/dynamic/Teams/TeamsCard/TeamCard1.tsx
================
import React from 'react'
import Icon from '@/components/images/Icon'
import { Team } from '@/types/team'
import { getTranslations } from 'next-intl/server'
import Link from 'next/link'
import { FadeIn } from '@/components/ui/FadeIn'
import { truncateWithEllipses } from '@/lib/helper'
import NextCloudinaryImage from '@/components/images/ImageNextCloudinary'
import BasicMarkdown from '@/components/ui/BasicMarkdown'
import { Member } from '@/types/member'
interface TeamCardProps {
  member: Member
}
const TeamCard1: React.FC<TeamCardProps> = async ({ member }) => {
  const t = await getTranslations('Team')
  return (
    <>
      <li key={member.fullname}>
        <FadeIn>
          <div className="group relative overflow-hidden rounded-3xl bg-neutral-100">
            <NextCloudinaryImage
              src={`${member.avatar?.url}`}
              alt={`${member.fullname}`}
              width={500}
              height={700}
              crop={'fill'}
              className="grayscale transition duration-500 motion-safe:group-hover:scale-105"
            />
            <div className="absolute inset-0 flex flex-col justify-end bg-gradient-to-t from-black to-black/0 to-40% p-6">
              <p className="font-display text-base/6 font-semibold tracking-wide text-white">
                {member.fullname}
              </p>
              <p className="mt-2 text-sm text-white">{member.role}</p>
            </div>
          </div>
        </FadeIn>
      </li>
    </>
  )
}
export default TeamCard1

================
File: src/components/sections/dynamic/Teams/TeamsCardSection.tsx
================
import React from 'react'
import { Team } from '@/types/team'
import { PageIntro } from '@/types/global'
import { fetchServices } from '@/request/fetch'
import { Container } from '@/components/ui/Container'
import { FadeIn } from '@/components/ui/FadeIn'
import { SectionIntro } from '../../SectionIntro'
import TeamCard1 from './TeamsCard/TeamCard1'
import { Member } from '@/types/member'
import { Section } from '@/components/ui/Section'
import { CldOgImage } from 'next-cloudinary'
interface TeamsProps {
  teamsSection: { sectionIntro: PageIntro } & { members: Member[] }
  designType: Number
}
interface RenderContentProps {
  members: Member[]
  sectionIntro: PageIntro
  designType?: Number
}
const RenderContent: React.FC<RenderContentProps> = ({
  members,
  sectionIntro,
  designType,
}) => {
  switch (designType) {
    default:
      return (
        <Container className="mt-24 sm:mt-32 lg:mt-40">
          <SectionIntro {...sectionIntro} />
          <div className="space-y-24">
            <FadeIn>
              <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4">
                <div className="lg:col-span-3">
                  <ul
                    role="list"
                    className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3 xl:gap-8"
                  >
                    {members.map((member: Member) => (
                      <TeamCard1 key={member.id} member={member} />
                    ))}
                  </ul>
                </div>
              </div>
            </FadeIn>
          </div>
        </Container>
      )
  }
}
const TeamSection: React.FC<TeamsProps> = async ({
  teamsSection,
  designType,
}) => {
  try {
  } catch (error) {
    console.error('Failed to load team:', error)
  }
  return (
    <Section>
      <RenderContent
        members={teamsSection.members.length > 0 ? teamsSection.members : []}
        sectionIntro={teamsSection.sectionIntro}
        designType={designType}
      />
    </Section>
  )
}
export default TeamSection

================
File: src/components/sections/dynamic/TestimonialSection.tsx
================
import React from 'react'
import NextCloudinaryImage from '@/components/images/ImageNextCloudinary'
import { MediaItem, PageIntro } from '@/types/global'
import { Container } from '@/components/ui/Container'
import { FadeIn } from '@/components/ui/FadeIn'
import BasicMarkdown from '@/components/ui/BasicMarkdown'
import { te } from 'date-fns/locale'
import { SectionIntro } from '../SectionIntro'
import { Section } from '@/components/ui/Section'
interface Author {
  fullname: string
  role?: string
  avatar?: MediaItem
}
interface Testimonial {
  id: number
  title: string
  content: string
  cover?: MediaItem
  author: Author
  pageIntro?: PageIntro
  member?: Author
}
interface TestimonialSectionProps {
  testimonialSection: {
    sectionIntro: PageIntro
    testimonials: Testimonial[]
  }
  designType?: number
}
const RenderContent: React.FC<TestimonialSectionProps> = ({
  testimonialSection,
  designType,
}) => {
  return (
    <>
      <FadeIn>
        {testimonialSection.sectionIntro && (
          <SectionIntro {...testimonialSection?.sectionIntro} />
        )}
        <div className="space-y-16">
          {testimonialSection.testimonials.map((testimonial) => {
            const member = testimonial?.member || testimonial?.author
            const avatar = member?.avatar
            return (
              <section
                key={testimonial.id}
                className="isolate overflow-hidden bg-white px-6 lg:px-8"
              >
                <figure className="grid grid-cols-1 items-center gap-x-6">
                  {}
                  <div className="relative col-span-2 lg:col-start-1 lg:row-start-2">
                    <svg
                      viewBox="0 0 162 128"
                      aria-hidden="true"
                      className="absolute -top-12 left-0 -z-10 h-32 stroke-gray-900/10"
                    >
                      <use href="#decorative-shape" />
                    </svg>
                    <blockquote className="text-4xl italic text-gray-900">
                      <BasicMarkdown>{testimonial.content}</BasicMarkdown>
                    </blockquote>
                  </div>
                  {}
                  {member && (
                    <>
                      {avatar && (
                        <div className="col-end-1 w-16 lg:row-span-4 lg:w-72">
                          <NextCloudinaryImage
                            alt={avatar.alternativeText}
                            src={avatar.url}
                            width={200}
                            height={200}
                            className="rounded-xl bg-indigo-50 lg:rounded-3xl"
                          />
                        </div>
                      )}
                      <figcaption className="text-base lg:col-start-1 lg:row-start-3">
                        <div className="font-semibold text-gray-900">
                          {member.fullname}
                        </div>
                        <div className="mt-1 text-gray-500">{member.role}</div>
                      </figcaption>
                    </>
                  )}
                </figure>
              </section>
            )
          })}
        </div>
      </FadeIn>
    </>
  )
}
const TestimonialSection: React.FC<TestimonialSectionProps> = ({
  testimonialSection,
  designType,
}) => {
  return (
    <Section>
      <RenderContent
        testimonialSection={testimonialSection}
        designType={designType}
      />
    </Section>
  )
}
export default TestimonialSection

================
File: src/components/sections/Footer.tsx
================
import Link from 'next/link'
import { Container } from '@/components/ui/Container'
import { FadeIn } from '@/components/ui/FadeIn'
import { useTranslations } from 'next-intl'
import { socialMediaProfiles } from './SocialMedia'
import NextCloudinaryImage from '../images/ImageNextCloudinary'
import { ContactFooter } from './ContactFooter'
function Navigation() {
  const t = useTranslations('Navigation')
  const navigation = [
    {
      title: 'Tagadart',
      links: [
        { title: 'About', href: '/about' },
        { title: 'Services', href: '/services' },
        { title: 'Blog', href: '/blog' },
        { title: 'Contact', href: '/contact' },
      ],
    },
    {
      title: `${t('follow_us')}`,
      links: socialMediaProfiles,
    },
  ]
  return (
    <nav>
      <ul role="list" className="grid grid-cols-2 gap-8 sm:grid-cols-3">
        {navigation.map((section, sectionIndex) => (
          <li key={sectionIndex}>
            <div className="font-display text-sm font-semibold tracking-wider text-neutral-950">
              {section.title}
            </div>
            <ul role="list" className="mt-4 text-sm text-neutral-700">
              {section.links.map((link, linkIndex) => (
                <li key={linkIndex} className="mt-4">
                  <Link
                    href={link.href}
                    className="transition hover:text-neutral-950"
                  >
                    {link.title}
                  </Link>
                </li>
              ))}
            </ul>
          </li>
        ))}
      </ul>
    </nav>
  )
}
export default function Footer() {
  return (
    <>
      <div className="w-full flex-auto">
        <ContactFooter />
      </div>
      <Container as="footer" className="mt-12 w-full sm:mt-16 lg:mt-20">
        <FadeIn>
          <div>
            <Navigation />
          </div>
          <div className="mb-20 mt-24 flex flex-wrap items-center justify-between gap-x-6 gap-y-4 border-t border-neutral-950/10 pt-12">
            <Link href="/" aria-label="Home">
              {}
              {
}
            </Link>
            <p className="text-sm text-neutral-700">
              © Tagadart Sàrl {new Date().getFullYear()}
            </p>
          </div>
        </FadeIn>
      </Container>
    </>
  )
}

================
File: src/components/sections/Navigation.tsx
================
import { Container, Link } from 'lucide-react'
import { useTranslations } from 'next-intl'
function NavigationRow({ children }: { children: React.ReactNode }) {
  return (
    <div className="even:mt-px sm:bg-neutral-950">
      <Container>
        <div className="grid grid-cols-1 sm:grid-cols-2">{children}</div>
      </Container>
    </div>
  )
}
function NavigationItem({
  href,
  children,
}: {
  href: string
  children: React.ReactNode
}) {
  return (
    <Link
      href={href}
      className="group relative isolate -mx-6 bg-neutral-950 px-6 py-10 even:mt-px sm:mx-0 sm:px-0 sm:py-16 sm:odd:pr-16 sm:even:mt-0 sm:even:border-l sm:even:border-neutral-800 sm:even:pl-16"
    >
      {children}
      <span className="absolute inset-y-0 -z-10 w-screen bg-neutral-900 opacity-0 transition group-odd:right-0 group-even:left-0 group-hover:opacity-100" />
    </Link>
  )
}
export default function Navigation() {
  const t = useTranslations('Navigation')
  return (
    <nav className="mt-px font-display text-5xl font-medium tracking-tight text-white">
      <NavigationRow>
        <NavigationItem href="/projects">{t('project')}</NavigationItem>
        <NavigationItem href="/about">{t('about')}</NavigationItem>
      </NavigationRow>
      <NavigationRow>
        <NavigationItem href="/services">{t('services')}</NavigationItem>
        <NavigationItem href="/blog">{t('blog')}</NavigationItem>
      </NavigationRow>
    </nav>
  )
}

================
File: src/components/sections/PageIntro.tsx
================
import clsx from 'clsx'
import { Container } from '@/components/ui/Container'
import { FadeIn } from '@/components/ui/FadeIn'
import { PageIntro } from '@/types/global'
import BasicMarkdown from '../ui/BasicMarkdown'
import NextCloudinaryImage from '../images/ImageNextCloudinary'
export function PageIntroSections({
  eyebrow,
  title,
  content,
  cover,
  centered = false,
  showCover = true,
}: PageIntro & { centered?: boolean; showCover?: boolean }) {
  return (
    <div className={clsx('mt-24', centered && 'text-center')}>
      <FadeIn>
        {}
        <div className={`grid gap-8 ${showCover && 'grid-cols-6'}`}>
          <div className="col-span-4">
            <h1>
              <span className="block font-display text-base font-semibold text-neutral-950">
                {eyebrow}
              </span>
              <span className="sr-only"> - </span>
              <span
                className={clsx(
                  'mt-6 block max-w-5xl font-display text-5xl font-medium tracking-tight text-neutral-950 [text-wrap:balance] sm:text-6xl',
                  centered && 'mx-auto',
                )}
              >
                {title}
              </span>
            </h1>
            <div
              className={clsx(
                'mt-6 max-w-3xl text-xl text-neutral-600',
                centered && 'mx-auto',
              )}
            >
              <BasicMarkdown>{content}</BasicMarkdown>
            </div>
          </div>
          {showCover && cover && (
            <div className="col-span-2">
              <NextCloudinaryImage
                src={cover.url}
                alt={cover.alternativeText}
                width={600}
                height={500}
                crop="auto"
                className="rounded-md shadow-2xl ring-1 ring-gray-900/10"
              />
            </div>
          )}
        </div>
      </FadeIn>
    </div>
  )
}

================
File: src/components/sections/Pagination.tsx
================
import React from 'react'
import {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from '@/components/ui/pagination'
type PaginationMainProps = {
  currentPage: number
  totalPages: number
  goToPage: (page: number) => void
}
function PaginationMain({
  currentPage,
  totalPages,
  goToPage,
}: PaginationMainProps) {
  const handlePageClick = (
    e: React.MouseEvent<HTMLAnchorElement, MouseEvent>,
    page: number,
  ) => {
    e.preventDefault()
    goToPage(page)
  }
  return (
    <div className="pt-6">
      <Pagination>
        <PaginationContent>
          <PaginationItem>
            <PaginationPrevious
              href="#!"
              onClick={(e) => handlePageClick(e, currentPage - 1)}
              className={currentPage === 1 ? 'pointer-events-none' : ''}
              aria-disabled={currentPage === 1}
              tabIndex={currentPage === 1 ? -1 : undefined}
            />
          </PaginationItem>
          {[...Array(totalPages)].map((_, num) => (
            <PaginationItem key={num + 1}>
              <PaginationLink
                isActive={currentPage === num + 1}
                href="#!"
                onClick={(e) => handlePageClick(e, num + 1)}
              >
                {num + 1}
              </PaginationLink>
            </PaginationItem>
          ))}
          {totalPages > 5 && (
            <PaginationItem>
              <PaginationEllipsis />
            </PaginationItem>
          )}
          <PaginationItem>
            <PaginationNext
              href="#!"
              onClick={(e) => handlePageClick(e, currentPage + 1)}
              className={
                currentPage === totalPages ? 'pointer-events-none' : ''
              }
              aria-disabled={currentPage === totalPages}
              tabIndex={currentPage === totalPages ? -1 : undefined}
            />
          </PaginationItem>
        </PaginationContent>
      </Pagination>
    </div>
  )
}
export default PaginationMain

================
File: src/components/sections/SectionIntro.tsx
================
import clsx from 'clsx'
import Image from 'next/image'
import { Container } from '@/components/ui/Container'
import { FadeIn } from '@/components/ui/FadeIn'
import BasicMarkdown from '../ui/BasicMarkdown'
import { MediaItem, PageIntro } from '@/types/global'
import NextCloudinaryImage from '../images/ImageNextCloudinary'
export function SectionIntro({
  title,
  eyebrow,
  content,
  smaller = false,
  invert = false,
  centered = false,
  pagination = false,
  cover,
  embedVideo,
  ...props
}: PageIntro & {
  pagination?: boolean
  centered?: boolean
  showCover?: boolean
  smaller?: boolean
  invert?: boolean
}) {
  const MediaRenderer = ({
    media,
    embedVideo,
  }: {
    media?: MediaItem
    embedVideo?: string
  }) => {
    if (embedVideo) {
      const getYouTubeEmbedUrl = (url: string) => {
        if (url.includes('youtube.com/embed')) return url
        const videoId = url.includes('youtube.com')
          ? new URL(url).searchParams.get('v')
          : url.split('/').pop()
        return `https://www.youtube.com/embed/${videoId}`
      }
      return (
        <div className="aspect-video w-full overflow-hidden rounded-lg">
          <iframe
            width="100%"
            height="100%"
            src={getYouTubeEmbedUrl(embedVideo)}
            title="YouTube Video"
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
            allowFullScreen
            className="h-full w-full rounded-lg shadow-lg"
          />
        </div>
      )
    }
    if (!media?.url) return null
    const {
      url,
      width = 1200,
      height = 675,
      alternativeText = '',
      provider_metadata,
    } = media
    const fileType = provider_metadata?.resource_type
    if (fileType === 'video') {
      return (
        <div className="aspect-video w-full overflow-hidden rounded-lg">
          <video
            controls
            preload="none"
            className="h-full w-full rounded-lg shadow-lg"
          >
            <source src={url} type="video/mp4" />
            Your browser does not support video playback.
          </video>
        </div>
      )
    }
    return (
      <NextCloudinaryImage
        src={url}
        alt={alternativeText}
        width={width}
        height={height}
        className="w-full rounded-lg shadow-lg"
        crop="fit"
        gravity="center"
        quality="auto"
        fetchFormat="auto"
        showSkeleton
      />
    )
  }
  const renderMedia = ({
    media,
    embedVideo,
  }: {
    media: MediaItem
    embedVideo?: string
  }) => {
    const fileType = cover?.provider_metadata?.resource_type
    const url = cover?.url
    if (embedVideo) {
      let embedUrl
      if (embedVideo.includes('youtube.com/embed')) {
        embedUrl = embedVideo
      } else if (
        embedVideo.includes('youtube.com') ||
        embedVideo.includes('youtu.be')
      ) {
        const videoId = embedVideo.includes('youtube.com')
          ? new URL(embedVideo).searchParams.get('v')
          : embedVideo.split('/').pop()
        embedUrl = `https://www.youtube.com/embed/${videoId}`
      }
      return (
        <iframe
          width="700"
          height="600"
          src={embedUrl}
          title={cover?.alternativeText || 'YouTube Video'}
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
          allowFullScreen
          className="w-full rounded-md shadow-2xl ring-1 ring-gray-900/10"
        ></iframe>
      )
    } else if (fileType === 'image' && url) {
      return (
        <Image
          src={url}
          alt={cover.alternativeText || 'Cover Image'}
          width={cover.width}
          height={cover.height}
          className="w-[76rem] rounded-md shadow-2xl ring-1 ring-gray-900/10"
        />
      )
    } else if (fileType === 'video') {
      return (
        <video width="700" height="600" controls preload="none">
          <source src={url} type="video/mp4" />
          Your browser does not support the video tag.
        </video>
      )
    }
    return null
  }
  return (
    <div
      {...props}
      className={clsx(centered && 'text-center', 'mb-8', 'pt-10')}
    >
      <FadeIn>
        <h2>
          {eyebrow && (
            <>
              <span
                className={clsx(
                  'block font-display text-base font-semibold',
                  invert ? 'text-primary-50' : 'text-primary-400',
                )}
              >
                {eyebrow}
              </span>
              <span className="sr-only"> - </span>
            </>
          )}
          <span
            className={clsx(
              'block font-display tracking-tight [text-wrap:balance]',
              smaller
                ? 'text-2xl font-semibold'
                : 'text-4xl font-medium sm:text-5xl',
              invert ? 'text-primary-50' : 'text-neutral-950',
            )}
          >
            {title}
          </span>
        </h2>
        {content && (
          <div
            className={clsx(
              'mt-6 max-w-3xl text-xl',
              invert ? 'text-primary-200' : 'text-neutral-600',
              centered && 'mx-auto',
            )}
          >
            <BasicMarkdown>{content}</BasicMarkdown>
          </div>
        )}
        {(cover || embedVideo) && (
          <div className="mt-8">
            <MediaRenderer media={cover ?? undefined} embedVideo={embedVideo} />
          </div>
        )}
        {}
      </FadeIn>
    </div>
  )
}

================
File: src/components/sections/SocialMedia.tsx
================
import Link from 'next/link'
import clsx from 'clsx'
import { LinkedinIcon } from 'lucide-react'
function FacebookIcon(props: React.ComponentPropsWithoutRef<'svg'>) {
  return (
    <svg viewBox="0 0 24 24" aria-hidden="true" {...props}>
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M22 12c0-5.523-4.477-10-10-10S2 6.477 2 12c0 4.991 3.657 9.128 8.438 9.878v-6.987h-2.54V12h2.54V9.797c0-2.506 1.492-3.89 3.777-3.89 1.094 0 2.238.195 2.238.195v2.46h-1.26c-1.243 0-1.63.771-1.63 1.562V12h2.773l-.443 2.89h-2.33v6.988C18.343 21.128 22 16.991 22 12Z"
      />
    </svg>
  )
}
function InstagramIcon(props: React.ComponentPropsWithoutRef<'svg'>) {
  return (
    <svg viewBox="0 0 24 24" aria-hidden="true" {...props}>
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M12.315 2c2.43 0 2.784.013 3.808.06 1.064.049 1.791.218 2.427.465.668.25 1.272.644 1.772 1.153.509.5.902 1.104 1.153 1.772.247.636.416 1.363.465 2.427.048 1.067.06 1.407.06 4.123v.08c0 2.643-.012 2.987-.06 4.043-.049 1.064-.218 1.791-.465 2.427a4.903 4.903 0 0 1-1.153 1.772c-.5.509-1.104.902-1.772 1.153-.636.247-1.363.416-2.427.465-1.067.048-1.407.06-4.123.06h-.08c-2.643 0-2.987-.012-4.043-.06-1.064-.049-1.791-.218-2.427-.465a4.903 4.903 0 0 1-1.772-1.153 4.902 4.902 0 0 1-1.153-1.772c-.247-.636-.416-1.363-.465-2.427-.047-1.024-.06-1.379-.06-3.808v-.63c0-2.43.013-2.784.06-3.808.049-1.064.218-1.791.465-2.427a4.902 4.902 0 0 1 1.153-1.772A4.902 4.902 0 0 1 5.45 2.525c.636-.247 1.363-.416 2.427-.465C8.901 2.013 9.256 2 11.685 2h.63Zm-.081 1.802h-.468c-2.456 0-2.784.011-3.807.058-.975.045-1.504.207-1.857.344-.467.182-.8.398-1.15.748-.35.35-.566.683-.748 1.15-.137.353-.3.882-.344 1.857-.047 1.023-.058 1.351-.058 3.807v.468c0 2.456.011 2.784.058 3.807.045.975.207 1.504.344 1.857.182.466.399.8.748 1.15.35.35.683.566 1.15.748.353.137.882.3 1.857.344 1.054.048 1.37.058 4.041.058h.08c2.597 0 2.917-.01 3.96-.058.976-.045 1.505-.207 1.858-.344.466-.182.8-.398 1.15-.748.35-.35.566-.683.748-1.15.137-.353.3-.882.344-1.857.048-1.055.058-1.37.058-4.041v-.08c0-2.597-.01-2.917-.058-3.96-.045-.976-.207-1.505-.344-1.858a3.096 3.096 0 0 0-.748-1.15 3.098 3.098 0 0 0-1.15-.748c-.353-.137-.882-.3-1.857-.344-1.023-.047-1.351-.058-3.807-.058ZM12 6.865a5.135 5.135 0 1 1 0 10.27 5.135 5.135 0 0 1 0-10.27Zm0 1.802a3.333 3.333 0 1 0 0 6.666 3.333 3.333 0 0 0 0-6.666Zm5.338-3.205a1.2 1.2 0 1 1 0 2.4 1.2 1.2 0 0 1 0-2.4Z"
      />
    </svg>
  )
}
export const socialMediaProfiles = [
  {
    title: 'Facebook',
    href: 'https://www.facebook.com/tagadartcommunication',
    icon: FacebookIcon,
  },
  {
    title: 'Linkedin',
    href: 'https://www.linkedin.com/company/tagadart',
    icon: LinkedinIcon,
  },
  {
    title: 'Instagram',
    href: 'https://www.instagram.com/tagadart_sarl/',
    icon: InstagramIcon,
  },
]
export default function SocialMedia({
  className,
  invert = false,
}: {
  className?: string
  invert?: boolean
}) {
  return (
    <ul
      role="list"
      className={clsx(
        'flex gap-x-10',
        invert ? 'text-white' : 'text-neutral-950',
        className,
      )}
    >
      {socialMediaProfiles.map((socialMediaProfile) => (
        <li key={socialMediaProfile.title}>
          <Link
            href={socialMediaProfile.href}
            aria-label={socialMediaProfile.title}
            className={clsx(
              'transition',
              invert ? 'hover:text-neutral-200' : 'hover:text-neutral-700',
            )}
          >
            <socialMediaProfile.icon className="h-6 w-6 fill-current" />
          </Link>
        </li>
      ))}
    </ul>
  )
}

================
File: src/components/sections/TagList.tsx
================
import clsx from 'clsx'
export function TagList({
  children,
  className,
}: {
  children: React.ReactNode
  className?: string
}) {
  return (
    <ul
      role="list"
      className={clsx(className, 'flex flex-wrap gap-4')}
      style={{ listStyleType: 'none', padding: 0, margin: 0 }}
    >
      {children}
    </ul>
  )
}
export function TagListItem({
  children,
  className,
}: {
  children: React.ReactNode
  className?: string
}) {
  return (
    <li
      className={clsx(
        'rounded-full bg-neutral-100 px-4 py-1.5 text-base text-neutral-600',
        className,
      )}
    >
      {children}
    </li>
  )
}

================
File: src/components/ui/BasicMarkdown.tsx
================
import React, { ReactNode } from 'react'
import ReactMarkdown from 'react-markdown'
import rehypeRaw from 'rehype-raw'
import remarkGfm from 'remark-gfm'
type Props = {
  content?: string
  children?: string
}
function BasicMarkdown({ children, content }: Props) {
  return (
    <ReactMarkdown
      className="markdown-content"
      remarkPlugins={[remarkGfm]}
      rehypePlugins={[rehypeRaw]}
    >
      {children || content}
    </ReactMarkdown>
  )
}
export default BasicMarkdown

================
File: src/components/ui/Border.tsx
================
import clsx from 'clsx'
type BorderProps<T extends React.ElementType> = {
  as?: T
  className?: string
  position?: 'top' | 'left'
  invert?: boolean
}
export function Border<T extends React.ElementType = 'div'>({
  as,
  className,
  position = 'top',
  invert = false,
  ...props
}: Omit<React.ComponentPropsWithoutRef<T>, keyof BorderProps<T>> &
  BorderProps<T>) {
  let Component = as ?? 'div'
  return (
    <Component
      className={clsx(
        className,
        'relative before:absolute after:absolute',
        invert
          ? 'before:bg-white after:bg-white/10'
          : 'before:bg-neutral-950 after:bg-neutral-950/10',
        position === 'top' &&
          'before:left-0 before:top-0 before:h-px before:w-6 after:left-8 after:right-0 after:top-0 after:h-px',
        position === 'left' &&
          'before:left-0 before:top-0 before:h-6 before:w-px after:bottom-0 after:left-0 after:top-8 after:w-px',
      )}
      {...props}
    />
  )
}

================
File: src/components/ui/button.tsx
================
import * as React from 'react'
import { Slot } from '@radix-ui/react-slot'
import { cva, type VariantProps } from 'class-variance-authority'
import { cn } from '@/lib/utils'
const buttonVariants = cva(
  'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-neutral-950 disabled:pointer-events-none disabled:opacity-50 dark:focus-visible:ring-neutral-300',
  {
    variants: {
      variant: {
        default:
          'bg-neutral-900 text-neutral-50 shadow hover:bg-neutral-900/90 dark:bg-neutral-50 dark:text-neutral-900 dark:hover:bg-neutral-50/90',
        primary:
          'bg-primary-700 text-primary-50 shadow hover:bg-primary-700/70 dark:bg-primary-50 dark:text-primary-700 dark:hover:bg-primary-50/90',
        destructive:
          'bg-red-500 text-neutral-50 shadow-sm hover:bg-red-500/90 dark:bg-red-900 dark:text-neutral-50 dark:hover:bg-red-900/90',
        outline:
          'border border-neutral-200 bg-white shadow-sm hover:bg-neutral-100 hover:text-neutral-900 dark:border-neutral-800 dark:bg-neutral-950 dark:hover:bg-neutral-800 dark:hover:text-neutral-50',
        secondary:
          'bg-neutral-100 text-neutral-900 shadow-sm hover:bg-neutral-100/80 dark:bg-neutral-800 dark:text-neutral-50 dark:hover:bg-neutral-800/80',
        ghost:
          'hover:bg-neutral-100 hover:text-neutral-900 dark:hover:bg-neutral-800 dark:hover:text-neutral-50',
        link: 'text-neutral-900 underline-offset-4 hover:underline dark:text-neutral-50',
      },
      size: {
        default: 'h-9 px-4 py-2',
        sm: 'h-8 rounded-md px-3 text-xs',
        lg: 'h-10 rounded-md px-8',
        icon: 'h-9 w-9',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  },
)
export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}
const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : 'button'
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  },
)
Button.displayName = 'Button'
export { Button, buttonVariants }

================
File: src/components/ui/calendar.tsx
================
'use client'
import * as React from 'react'
import { ChevronLeftIcon, ChevronRightIcon } from '@radix-ui/react-icons'
import { DayPicker } from 'react-day-picker'
import { cn } from '@/lib/utils'
import { buttonVariants } from '@/components/ui/button'
export type CalendarProps = React.ComponentProps<typeof DayPicker>
function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn('p-3', className)}
      classNames={{
        months: 'flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0',
        month: 'space-y-4',
        caption: 'flex justify-center pt-1 relative items-center',
        caption_label: 'text-sm font-medium',
        nav: 'space-x-1 flex items-center',
        nav_button: cn(
          buttonVariants({ variant: 'outline' }),
          'h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100',
        ),
        nav_button_previous: 'absolute left-1',
        nav_button_next: 'absolute right-1',
        table: 'w-full border-collapse space-y-1',
        head_row: 'flex',
        head_cell:
          'text-neutral-500 rounded-md w-8 font-normal text-[0.8rem] dark:text-neutral-400',
        row: 'flex w-full mt-2',
        cell: cn(
          'relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-neutral-100 [&:has([aria-selected].day-outside)]:bg-neutral-100/50 [&:has([aria-selected].day-range-end)]:rounded-r-md dark:[&:has([aria-selected])]:bg-neutral-800 dark:[&:has([aria-selected].day-outside)]:bg-neutral-800/50',
          props.mode === 'range'
            ? '[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md'
            : '[&:has([aria-selected])]:rounded-md',
        ),
        day: cn(
          buttonVariants({ variant: 'ghost' }),
          'h-8 w-8 p-0 font-normal aria-selected:opacity-100',
        ),
        day_range_start: 'day-range-start',
        day_range_end: 'day-range-end',
        day_selected:
          'bg-neutral-900 text-neutral-50 hover:bg-neutral-900 hover:text-neutral-50 focus:bg-neutral-900 focus:text-neutral-50 dark:bg-neutral-50 dark:text-neutral-900 dark:hover:bg-neutral-50 dark:hover:text-neutral-900 dark:focus:bg-neutral-50 dark:focus:text-neutral-900',
        day_today:
          'bg-neutral-100 text-neutral-900 dark:bg-neutral-800 dark:text-neutral-50',
        day_outside:
          'day-outside text-neutral-500 opacity-50  aria-selected:bg-neutral-100/50 aria-selected:text-neutral-500 aria-selected:opacity-30 dark:text-neutral-400 dark:aria-selected:bg-neutral-800/50 dark:aria-selected:text-neutral-400',
        day_disabled: 'text-neutral-500 opacity-50 dark:text-neutral-400',
        day_range_middle:
          'aria-selected:bg-neutral-100 aria-selected:text-neutral-900 dark:aria-selected:bg-neutral-800 dark:aria-selected:text-neutral-50',
        day_hidden: 'invisible',
        ...classNames,
      }}
      components={{
        IconLeft: ({ ...props }) => <ChevronLeftIcon className="h-4 w-4" />,
        IconRight: ({ ...props }) => <ChevronRightIcon className="h-4 w-4" />,
      }}
      {...props}
    />
  )
}
Calendar.displayName = 'Calendar'
export { Calendar }

================
File: src/components/ui/Container.tsx
================
import clsx from 'clsx'
type ContainerProps<T extends React.ElementType> = {
  as?: T
  className?: string
  children: React.ReactNode
}
export function Container<T extends React.ElementType = 'div'>({
  as,
  className,
  children,
}: Omit<React.ComponentPropsWithoutRef<T>, keyof ContainerProps<T>> &
  ContainerProps<T>) {
  let Component = as ?? 'div'
  return (
    <Component className={clsx('mx-auto max-w-7xl px-6', className)}>
      <div>{children}</div>
    </Component>
  )
}

================
File: src/components/ui/FadeIn.tsx
================
'use client'
import { createContext, useContext } from 'react'
import { motion, useReducedMotion } from 'framer-motion'
const FadeInStaggerContext = createContext(false)
const viewport = { once: true, margin: '0px 0px -200px' }
export function FadeIn(
  props: React.ComponentPropsWithoutRef<typeof motion.div>,
) {
  let shouldReduceMotion = useReducedMotion()
  let isInStaggerGroup = useContext(FadeInStaggerContext)
  return (
    <motion.div
      variants={{
        hidden: { opacity: 0, y: shouldReduceMotion ? 0 : 24 },
        visible: { opacity: 1, y: 0 },
      }}
      transition={{ duration: 0.5 }}
      {...(isInStaggerGroup
        ? {}
        : {
            initial: 'hidden',
            whileInView: 'visible',
            viewport,
          })}
      {...props}
    />
  )
}
export function FadeInStagger({
  faster = false,
  ...props
}: React.ComponentPropsWithoutRef<typeof motion.div> & { faster?: boolean }) {
  return (
    <FadeInStaggerContext.Provider value={true}>
      <motion.div
        initial="hidden"
        whileInView="visible"
        viewport={viewport}
        transition={{ staggerChildren: faster ? 0.12 : 0.2 }}
        {...props}
      />
    </FadeInStaggerContext.Provider>
  )
}

================
File: src/components/ui/form.tsx
================
'use client'
import * as React from 'react'
import * as LabelPrimitive from '@radix-ui/react-label'
import { Slot } from '@radix-ui/react-slot'
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from 'react-hook-form'
import { cn } from '@/lib/utils'
import { Label } from '@/components/ui/label'
const Form = FormProvider
type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
> = {
  name: TName
}
const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue,
)
const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}
const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()
  const fieldState = getFieldState(fieldContext.name, formState)
  if (!fieldContext) {
    throw new Error('useFormField should be used within <FormField>')
  }
  const { id } = itemContext
  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}
type FormItemContextValue = {
  id: string
}
const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue,
)
const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()
  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn('space-y-2', className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = 'FormItem'
const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()
  return (
    <Label
      ref={ref}
      className={cn(error && 'text-red-500 dark:text-red-900', className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = 'FormLabel'
const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()
  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = 'FormControl'
const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()
  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn(
        'text-[0.8rem] text-neutral-500 dark:text-neutral-400',
        className,
      )}
      {...props}
    />
  )
})
FormDescription.displayName = 'FormDescription'
const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children
  if (!body) {
    return null
  }
  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn(
        'text-[0.8rem] font-medium text-red-500 dark:text-red-900',
        className,
      )}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = 'FormMessage'
export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}

================
File: src/components/ui/GrayscaleTransitionImage.tsx
================
'use client'
import { useRef } from 'react'
import Image, { type ImageProps } from 'next/image'
import {
  motion,
  useMotionTemplate,
  useScroll,
  useTransform,
} from 'framer-motion'
const MotionImage = motion(Image)
export function GrayscaleTransitionImage(
  props: Pick<
    ImageProps,
    'src' | 'quality' | 'className' | 'sizes' | 'priority' | 'width' | 'height'
  > & { alt?: string },
) {
  let ref = useRef<React.ElementRef<'div'>>(null)
  let { scrollYProgress } = useScroll({
    target: ref,
    offset: ['start 65%', 'end 35%'],
  })
  let grayscale = useTransform(scrollYProgress, [0, 0.5, 1], [1, 0, 1])
  let filter = useMotionTemplate`grayscale(${grayscale})`
  return (
    <div ref={ref} className="group relative">
      <MotionImage alt="" style={{ filter } as any} {...props} />
      <div
        className="pointer-events-none absolute left-0 top-0 w-full opacity-0 transition duration-300 group-hover:opacity-100"
        aria-hidden="true"
      >
        <Image alt="" {...props} />
      </div>
    </div>
  )
}

================
File: src/components/ui/GridList.tsx
================
import clsx from 'clsx'
import { Border } from '@/components/ui/Border'
import { FadeIn, FadeInStagger } from '@/components/ui/FadeIn'
export function GridList({
  children,
  className,
}: {
  children: React.ReactNode
  className?: string
}) {
  return (
    <FadeInStagger>
      <ul
        role="list"
        className={clsx(
          'grid grid-cols-1 gap-10 sm:grid-cols-2 lg:grid-cols-3',
          className,
        )}
      >
        {children}
      </ul>
    </FadeInStagger>
  )
}
export function GridListItem({
  title,
  children,
  className,
  invert = false,
}: {
  title: string
  children: React.ReactNode
  className?: string
  invert?: boolean
}) {
  return (
    <li
      className={clsx(
        'text-base',
        invert
          ? 'text-neutral-300 before:bg-white after:bg-white/10'
          : 'text-neutral-600 before:bg-neutral-950 after:bg-neutral-100',
        className,
      )}
    >
      <FadeIn>
        <Border position="left" className="px-8" invert={invert}>
          <strong
            className={clsx(
              'font-semibold',
              invert ? 'text-white' : 'text-neutral-950',
            )}
          >
            {title}.
          </strong>
          {children}
        </Border>
      </FadeIn>
    </li>
  )
}

================
File: src/components/ui/GridPattern.tsx
================
'use client'
import { useEffect, useId, useRef, useState } from 'react'
import { motion } from 'framer-motion'
function Block({
  x,
  y,
  ...props
}: Omit<React.ComponentPropsWithoutRef<typeof motion.path>, 'x' | 'y'> & {
  x: number
  y: number
}) {
  return (
    <motion.path
      transform={`translate(${-32 * y + 96 * x} ${160 * y})`}
      d="M45.119 4.5a11.5 11.5 0 0 0-11.277 9.245l-25.6 128C6.82 148.861 12.262 155.5 19.52 155.5h63.366a11.5 11.5 0 0 0 11.277-9.245l25.6-128c1.423-7.116-4.02-13.755-11.277-13.755H45.119Z"
      {...props}
    />
  )
}
export function GridPattern({
  yOffset = 0,
  interactive = false,
  ...props
}: React.ComponentPropsWithoutRef<'svg'> & {
  yOffset?: number
  interactive?: boolean
}) {
  let id = useId()
  let ref = useRef<React.ElementRef<'svg'>>(null)
  let currentBlock = useRef<[x: number, y: number]>()
  let counter = useRef(0)
  let [hoveredBlocks, setHoveredBlocks] = useState<
    Array<[x: number, y: number, key: number]>
  >([])
  let staticBlocks = [
    [1, 1],
    [2, 2],
    [4, 3],
    [6, 2],
    [7, 4],
    [5, 5],
  ]
  useEffect(() => {
    if (!interactive) {
      return
    }
    function onMouseMove(event: MouseEvent) {
      if (!ref.current) {
        return
      }
      let rect = ref.current.getBoundingClientRect()
      let x = event.clientX - rect.left
      let y = event.clientY - rect.top
      if (x < 0 || y < 0 || x > rect.width || y > rect.height) {
        return
      }
      x = x - rect.width / 2 - 32
      y = y - yOffset
      x += Math.tan(32 / 160) * y
      x = Math.floor(x / 96)
      y = Math.floor(y / 160)
      if (currentBlock.current?.[0] === x && currentBlock.current?.[1] === y) {
        return
      }
      currentBlock.current = [x, y]
      setHoveredBlocks((blocks) => {
        let key = counter.current++
        let block = [x, y, key] as (typeof hoveredBlocks)[number]
        return [...blocks, block].filter(
          (block) => !(block[0] === x && block[1] === y && block[2] !== key),
        )
      })
    }
    window.addEventListener('mousemove', onMouseMove)
    return () => {
      window.removeEventListener('mousemove', onMouseMove)
    }
  }, [yOffset, interactive])
  return (
    <svg ref={ref} aria-hidden="true" {...props}>
      <rect width="100%" height="100%" fill={`url(#${id})`} strokeWidth="0" />
      <svg x="50%" y={yOffset} strokeWidth="0" className="overflow-visible">
        {staticBlocks.map((block) => (
          <Block key={`${block}`} x={block[0]} y={block[1]} />
        ))}
        {hoveredBlocks.map((block) => (
          <Block
            key={block[2]}
            x={block[0]}
            y={block[1]}
            animate={{ opacity: [0, 1, 0] }}
            transition={{ duration: 1, times: [0, 0, 1] }}
            onAnimationComplete={() => {
              setHoveredBlocks((blocks) =>
                blocks.filter((b) => b[2] !== block[2]),
              )
            }}
          />
        ))}
      </svg>
      <defs>
        <pattern
          id={id}
          width="96"
          height="480"
          x="50%"
          patternUnits="userSpaceOnUse"
          patternTransform={`translate(0 ${yOffset})`}
          fill="none"
        >
          <path d="M128 0 98.572 147.138A16 16 0 0 1 82.883 160H13.117a16 16 0 0 0-15.69 12.862l-26.855 134.276A16 16 0 0 1-45.117 320H-116M64-160 34.572-12.862A16 16 0 0 1 18.883 0h-69.766a16 16 0 0 0-15.69 12.862l-26.855 134.276A16 16 0 0 1-109.117 160H-180M192 160l-29.428 147.138A15.999 15.999 0 0 1 146.883 320H77.117a16 16 0 0 0-15.69 12.862L34.573 467.138A16 16 0 0 1 18.883 480H-52M-136 480h58.883a16 16 0 0 0 15.69-12.862l26.855-134.276A16 16 0 0 1-18.883 320h69.766a16 16 0 0 0 15.69-12.862l26.855-134.276A16 16 0 0 1 109.117 160H192M-72 640h58.883a16 16 0 0 0 15.69-12.862l26.855-134.276A16 16 0 0 1 45.117 480h69.766a15.999 15.999 0 0 0 15.689-12.862l26.856-134.276A15.999 15.999 0 0 1 173.117 320H256M-200 320h58.883a15.999 15.999 0 0 0 15.689-12.862l26.856-134.276A16 16 0 0 1-82.883 160h69.766a16 16 0 0 0 15.69-12.862L29.427 12.862A16 16 0 0 1 45.117 0H128" />
        </pattern>
      </defs>
    </svg>
  )
}

================
File: src/components/ui/input.tsx
================
import * as React from 'react'
import { cn } from '@/lib/utils'
export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}
const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          'flex h-9 w-full rounded-md border border-neutral-200 bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-neutral-500 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-neutral-950 disabled:cursor-not-allowed disabled:opacity-50 dark:border-neutral-800 dark:placeholder:text-neutral-400 dark:focus-visible:ring-neutral-300',
          className,
        )}
        ref={ref}
        {...props}
      />
    )
  },
)
Input.displayName = 'Input'
export { Input }

================
File: src/components/ui/label.tsx
================
'use client'
import * as React from 'react'
import * as LabelPrimitive from '@radix-ui/react-label'
import { cva, type VariantProps } from 'class-variance-authority'
import { cn } from '@/lib/utils'
const labelVariants = cva(
  'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70',
)
const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName
export { Label }

================
File: src/components/ui/List.tsx
================
import clsx from 'clsx'
import { Border } from '@/components/ui/Border'
import { FadeIn, FadeInStagger } from '@/components/ui/FadeIn'
export function List({
  children,
  className,
}: {
  children: React.ReactNode
  className?: string
}) {
  return (
    <FadeInStagger>
      <ul role="list" className={clsx('text-base text-neutral-600', className)}>
        {children}
      </ul>
    </FadeInStagger>
  )
}
export function ListItem({
  children,
  title,
}: {
  children: React.ReactNode
  title?: string
}) {
  return (
    <li className="group mt-10 first:mt-0">
      <FadeIn>
        <Border className="pt-10 group-first:pt-0 group-first:before:hidden group-first:after:hidden">
          {title && (
            <strong className="font-semibold text-neutral-950">{`${title}. `}</strong>
          )}
          {children}
        </Border>
      </FadeIn>
    </li>
  )
}

================
File: src/components/ui/message-markdown-memoized.tsx
================
import { FC, memo } from 'react'
import ReactMarkdown, { Options } from 'react-markdown'
export const MessageMarkdownMemoized: FC<Options> = memo(
  ReactMarkdown,
  (prevProps, nextProps) =>
    prevProps.children === nextProps.children &&
    prevProps.className === nextProps.className,
)

================
File: src/components/ui/message-markdown.tsx
================
import React, { FC } from 'react'
import remarkGfm from 'remark-gfm'
import ReactMarkdown from 'react-markdown'
import { TagList, TagListItem } from '../sections/TagList'
import { Testimonial } from '../elements/Testimonial'
import { StatList, StatListItem } from './StatList'
import TopTip from './TopTip'
import rehypeHighlight from 'rehype-highlight'
interface MessageMarkdownProps {
  content: string
}
interface TagListItem {
  tagName: string
}
interface Blockquote {
  author: {
    name: string
    role: string
  }
  image: {
    src: string
  }
  text: string
}
interface StatListItem {
  value: string
  label: string
}
interface ExtractedData {
  tags: TagListItem[]
  blockquote: Blockquote
  stats: StatListItem[]
  otherText: string
  topTipContent: string
}
function extractDataFromMDX(mdxString: string): ExtractedData {
  const tags: TagListItem[] = []
  const stats: StatListItem[] = []
  let topTipContent = ''
  let tagListMatch
  try {
    if (typeof mdxString === 'undefined') {
      throw new Error('mdxString is undefined')
    }
    tagListMatch = mdxString.match(/<TagList>[\s\S]*?<\/TagList>/)
  } catch (error) {}
  if (tagListMatch) {
    const tagListItems = tagListMatch[0].match(
      /<TagListItem>(.*?)<\/TagListItem>/g,
    )
    if (tagListItems) {
      tagListItems.forEach((tag) => {
        const tagNameMatch = tag.match(/<TagListItem>(.*?)<\/TagListItem>/)
        if (tagNameMatch) {
          tags.push({ tagName: tagNameMatch[1] })
        }
      })
    }
  }
  const blockquoteMatch = mdxString.match(
    /<Blockquote[\s\S]*?>([\s\S]*?)<\/Blockquote>/,
  )
  let blockquote = {
    author: {
      name: '',
      role: '',
    },
    image: { src: '' },
    text: '',
  }
  if (blockquoteMatch) {
    const authorNameMatch = blockquoteMatch[0].match(/name: '([^']*)'/)
    const authorRoleMatch = blockquoteMatch[0].match(/role: '([^']*)'/)
    const imageSrcMatch = blockquoteMatch[0].match(/src: ([^\s}]*)/)
    const textMatch = blockquoteMatch[1].match(/>([\s\S]*?)<\/Blockquote>/)
    blockquote = {
      author: {
        name: authorNameMatch ? authorNameMatch[1] : '',
        role: authorRoleMatch ? authorRoleMatch[1] : '',
      },
      image: { src: imageSrcMatch ? imageSrcMatch[1].trim() : '' },
      text: textMatch
        ? textMatch[1].trim()
        : blockquoteMatch[1].replace(/<[^>]+>/g, '').trim(),
    }
  }
  const statListMatch = mdxString.match(/<StatList>[\s\S]*?<\/StatList>/)
  if (statListMatch) {
    const statListItems = statListMatch[0].match(
      /<StatListItem value="([^"]+)" label="([^"]+)" \/>/g,
    )
    if (statListItems) {
      statListItems.forEach((stat) => {
        const statMatch = stat.match(
          /<StatListItem value="([^"]+)" label="([^"]+)" \/>/,
        )
        if (statMatch) {
          stats.push({ value: statMatch[1], label: statMatch[2] })
        }
      })
    }
  }
  const topTipMatch = mdxString.match(/<TopTip>([\s\S]*?)<\/TopTip>/)
  if (topTipMatch) {
    topTipContent = topTipMatch[1].trim()
  }
  const cleanedMdxString = mdxString
    .replace(/<TagList>[\s\S]*?<\/TagList>/, '')
    .replace(/<Blockquote[\s\S]*?>([\s\S]*?)<\/Blockquote>/, '')
    .replace(/<StatList>[\s\S]*?<\/StatList>/, '')
    .replace(/<TopTip>[\s\S]*?<\/TopTip>/, '')
  const otherText = cleanedMdxString.trim()
  return {
    tags,
    blockquote,
    stats,
    otherText,
    topTipContent,
  }
}
export const MessageMarkdown: FC<MessageMarkdownProps> = ({ content }) => {
  const { tags, blockquote, stats, otherText, topTipContent } =
    extractDataFromMDX(content)
  const isBlockquoteEmpty =
    !blockquote.author.name &&
    !blockquote.author.role &&
    !blockquote.image.src &&
    !blockquote.text
  return (
    <div className="main_content mt-24 sm:mt-32 lg:mt-40 [&>*]:mx-auto [&>*]:max-w-3xl [&>:first-child]:!mt-0 [&>:last-child]:!mb-0">
      <div className="typography">
        <ReactMarkdown
          remarkPlugins={[remarkGfm]}
          rehypePlugins={[rehypeHighlight]}
        >
          {otherText}
        </ReactMarkdown>
        {topTipContent && <TopTip>{topTipContent}</TopTip>}
        <TagList>
          {tags.map((tag, index) => (
            <TagListItem key={index}>{tag.tagName}</TagListItem>
          ))}
        </TagList>
        {
}
        <StatList>
          {stats.map((stat, index) => (
            <StatListItem key={index} label={stat.label} value={stat.value} />
          ))}
        </StatList>
      </div>
    </div>
  )
}

================
File: src/components/ui/pagination.tsx
================
import * as React from 'react'
import { ChevronLeft, ChevronRight, MoreHorizontal } from 'lucide-react'
import Link from 'next/link'
import { cn } from '@/lib/utils'
import { ButtonProps, buttonVariants } from '@/components/ui/button'
import { useTranslations } from 'next-intl'
const Pagination = ({ className, ...props }: React.ComponentProps<'nav'>) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn('mx-auto flex w-full justify-center', className)}
    {...props}
  />
)
Pagination.displayName = 'Pagination'
const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<'ul'>
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn('flex flex-row items-center gap-1', className)}
    {...props}
  />
))
PaginationContent.displayName = 'PaginationContent'
const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<'li'>
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn('', className)} {...props} />
))
PaginationItem.displayName = 'PaginationItem'
type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, 'size'> &
  React.ComponentProps<typeof Link>
const PaginationLink = ({
  className,
  isActive,
  size = 'icon',
  ...props
}: PaginationLinkProps) => (
  <Link
    aria-current={isActive ? 'page' : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? 'outline' : 'ghost',
        size,
      }),
      className,
    )}
    {...props}
  />
)
PaginationLink.displayName = 'PaginationLink'
const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => {
  const t = useTranslations('Pagination')
  return (
    <PaginationLink
      aria-label="Go to previous page"
      size="default"
      className={cn('gap-1 pl-2.5', className)}
      {...props}
    >
      <ChevronLeft className="h-4 w-4" />
      <span>{t('previous')}</span>
    </PaginationLink>
  )
}
PaginationPrevious.displayName = 'PaginationPrevious'
const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => {
  const t = useTranslations('Pagination')
  return (
    <PaginationLink
      aria-label="Go to next page"
      size="default"
      className={cn('gap-1 pr-2.5', className)}
      {...props}
    >
      <span>{t('next')}</span> {}
      <ChevronRight className="h-4 w-4" />
    </PaginationLink>
  )
}
PaginationNext.displayName = 'PaginationNext'
const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<'span'>) => {
  const t = useTranslations('Pagination')
  return (
    <span
      aria-hidden
      className={cn('flex h-9 w-9 items-center justify-center', className)}
      {...props}
    >
      <MoreHorizontal className="h-4 w-4" />
      <span className="sr-only">{t('morePages')}</span>{' '}
      {}
    </span>
  )
}
PaginationEllipsis.displayName = 'PaginationEllipsis'
export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}

================
File: src/components/ui/popover.tsx
================
'use client'
import * as React from 'react'
import * as PopoverPrimitive from '@radix-ui/react-popover'
import { cn } from '@/lib/utils'
const Popover = PopoverPrimitive.Root
const PopoverTrigger = PopoverPrimitive.Trigger
const PopoverAnchor = PopoverPrimitive.Anchor
const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = 'center', sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        'z-50 w-72 rounded-md border border-neutral-200 bg-white p-4 text-neutral-950 shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 dark:border-neutral-800 dark:bg-neutral-950 dark:text-neutral-50',
        className,
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName
export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }

================
File: src/components/ui/ReadMore.tsx
================
import React, { useState } from 'react'
import { getTranslations } from 'next-intl/server'
export async function TruncatedTextReadMore({
  text,
  max,
}: {
  text: string
  max: number
}) {
  const [isTruncated, setIsTruncated] = useState(true)
  const toggleTruncated = () => setIsTruncated(!isTruncated)
  const t = await getTranslations('General')
  if (text.length <= max) {
    return (
      <p className="pt-2 text-secondary-700">
        <em>{text}</em>
      </p>
    )
  }
  const displayText = isTruncated ? text.substr(0, max - 1) + '...' : text
  return (
    <p className="pt-2 text-secondary-700">
      <em>{displayText}</em>
      <br />
      <a className="link cursor-pointer" onClick={toggleTruncated}>
        {isTruncated ? t('read_more') : t('read_less')}
      </a>
    </p>
  )
}

================
File: src/components/ui/RootLayout.tsx
================
'use client'
import {
  createContext,
  useContext,
  useEffect,
  useId,
  useRef,
  useState,
} from 'react'
import Link from 'next/link'
import { usePathname } from 'next/navigation'
import clsx from 'clsx'
import { motion, MotionConfig, useReducedMotion } from 'framer-motion'
import dynamic from 'next/dynamic'
import { Button } from '@/components/elements/Button'
import { Container } from '@/components/ui/Container'
import { GridPattern } from '@/components/ui/GridPattern'
import ErrorBoundary from '@/components/elements/ErrorBoundary'
import { useTranslations } from 'next-intl'
const Footer = dynamic(() => import('@/components/sections/Footer'), {
  loading: () => <p>Loading footer...</p>,
})
const SocialMedia = dynamic(() => import('@/components/sections/SocialMedia'), {
  loading: () => <p>Loading socialMedia...</p>,
})
function NavigationRow({ children }: { children: React.ReactNode }) {
  return (
    <div className="even:mt-px sm:bg-neutral-950">
      <Container>
        <div className="grid grid-cols-1 sm:grid-cols-2">{children}</div>
      </Container>
    </div>
  )
}
function NavigationItem({
  href,
  children,
}: {
  href: string
  children: React.ReactNode
}) {
  return (
    <Link
      href={href}
      className="group relative isolate -mx-6 bg-neutral-950 px-6 py-10 even:mt-px sm:mx-0 sm:px-0 sm:py-16 sm:odd:pr-16 sm:even:mt-0 sm:even:border-l sm:even:border-neutral-800 sm:even:pl-16"
    >
      {children}
      <span className="absolute inset-y-0 -z-10 w-screen bg-neutral-900 opacity-0 transition group-odd:right-0 group-even:left-0 group-hover:opacity-100" />
    </Link>
  )
}
export default function Navigation() {
  const t = useTranslations('Navigation')
  return (
    <nav className="mt-px font-display text-5xl font-medium tracking-tight text-white">
      <NavigationRow>
        <NavigationItem href="/projects">{t('project')}</NavigationItem>
        <NavigationItem href="/about">{t('about')}</NavigationItem>
      </NavigationRow>
      <NavigationRow>
        <NavigationItem href="/services">{t('services')}</NavigationItem>
        <NavigationItem href="/blog">{t('blog')}</NavigationItem>
      </NavigationRow>
    </nav>
  )
}
const RootLayoutContext = createContext<{
  logoHovered: boolean
  setLogoHovered: React.Dispatch<React.SetStateAction<boolean>>
} | null>(null)
function XIcon(props: React.ComponentPropsWithoutRef<'svg'>) {
  return (
    <svg viewBox="0 0 24 24" aria-hidden="true" {...props}>
      <path d="m5.636 4.223 14.142 14.142-1.414 1.414L4.222 5.637z" />
      <path d="M4.222 18.363 18.364 4.22l1.414 1.414L5.636 19.777z" />
    </svg>
  )
}
function MenuIcon(props: React.ComponentPropsWithoutRef<'svg'>) {
  return (
    <svg viewBox="0 0 24 24" aria-hidden="true" {...props}>
      <path d="M2 6h20v2H2zM2 16h20v2H2z" />
    </svg>
  )
}
function Header({
  panelId,
  icon: Icon,
  expanded,
  onToggle,
  toggleRef,
  invert = false,
}: {
  panelId: string
  icon: React.ComponentType<{ className?: string }>
  expanded: boolean
  onToggle: () => void
  toggleRef: React.RefObject<HTMLButtonElement>
  invert?: boolean
}) {
  let { logoHovered, setLogoHovered } = useContext(RootLayoutContext)!
  const t = useTranslations('Contact')
  return (
    <Container>
      <div className="flex items-center justify-between">
        <Link
          href="/"
          aria-label="Home"
          onMouseEnter={() => setLogoHovered(true)}
          onMouseLeave={() => setLogoHovered(false)}
        >
          {
}
        </Link>
        <div className="flex items-center gap-x-8">
          <Button href="/contact" invert={invert}>
            {t('button_contact')}
          </Button>
          <button
            ref={toggleRef}
            type="button"
            onClick={onToggle}
            aria-expanded={expanded ? 'true' : 'false'}
            aria-controls={panelId}
            className={clsx(
              'group -m-2.5 rounded-full p-2.5 transition',
              invert ? 'hover:bg-white/10' : 'hover:bg-neutral-950/10',
            )}
            aria-label="Toggle navigation"
          >
            <Icon
              className={clsx(
                'h-6 w-6',
                invert
                  ? 'fill-white group-hover:fill-neutral-200'
                  : 'fill-neutral-950 group-hover:fill-neutral-700',
              )}
            />
          </button>
        </div>
      </div>
    </Container>
  )
}
function RootLayoutInner({ children }: { children: React.ReactNode }) {
  let panelId = useId()
  let [expanded, setExpanded] = useState(false)
  let openRef = useRef<React.ElementRef<'button'>>(null)
  let closeRef = useRef<React.ElementRef<'button'>>(null)
  let navRef = useRef<React.ElementRef<'div'>>(null)
  let shouldReduceMotion = useReducedMotion()
  useEffect(() => {
    function onClick(event: MouseEvent) {
      if (
        event.target instanceof HTMLElement &&
        event.target.closest('a')?.href === window.location.href
      ) {
        setExpanded(false)
      }
    }
    window.addEventListener('click', onClick)
    return () => {
      window.removeEventListener('click', onClick)
    }
  }, [])
  const t = useTranslations('Navigation')
  return (
    <MotionConfig transition={shouldReduceMotion ? { duration: 0 } : undefined}>
      <header>
        <div
          className="absolute left-0 right-0 top-2 z-40 pt-14"
          aria-hidden={expanded ? 'true' : undefined}
          inert={expanded ? '' : undefined}
        >
          <Header
            panelId={panelId}
            icon={MenuIcon}
            toggleRef={openRef}
            expanded={expanded}
            onToggle={() => {
              setExpanded((expanded) => !expanded)
              window.setTimeout(() =>
                closeRef.current?.focus({ preventScroll: true }),
              )
            }}
          />
        </div>
        <motion.div
          layout
          id={panelId}
          style={{ height: expanded ? 'auto' : '0.5rem' }}
          className="relative z-50 overflow-hidden bg-neutral-950 pt-2"
          aria-hidden={expanded ? undefined : 'true'}
          inert={expanded ? undefined : ''}
        >
          <motion.div layout className="bg-neutral-800">
            <div ref={navRef} className="bg-neutral-950 pb-16 pt-14">
              <Header
                invert
                panelId={panelId}
                icon={XIcon}
                toggleRef={closeRef}
                expanded={expanded}
                onToggle={() => {
                  setExpanded((expanded) => !expanded)
                  window.setTimeout(() =>
                    openRef.current?.focus({ preventScroll: true }),
                  )
                }}
              />
            </div>
            <ErrorBoundary>
              <Navigation />
            </ErrorBoundary>
            <div className="relative bg-neutral-950 before:absolute before:inset-x-0 before:top-0 before:h-px before:bg-neutral-800">
              <Container>
                <div className="grid grid-cols-1 gap-y-10 pb-16 pt-10 sm:grid-cols-2 sm:pt-16">
                  <div className="sm:border-l sm:border-transparent sm:pl-16">
                    <h2 className="font-display text-base font-semibold text-white">
                      {t('follow_us')}
                    </h2>
                    <ErrorBoundary>
                      <SocialMedia className="mt-6" invert />
                    </ErrorBoundary>
                  </div>
                </div>
              </Container>
            </div>
          </motion.div>
        </motion.div>
      </header>
      <motion.div
        layout
        style={{ borderTopLeftRadius: 40, borderTopRightRadius: 40 }}
        className="relative flex flex-auto overflow-hidden bg-white pt-40"
      >
        <motion.div
          layout
          className="relative isolate flex w-full flex-col pt-9"
        >
          <GridPattern
            className="absolute inset-x-0 -top-14 -z-10 h-[1000px] w-full fill-neutral-50 stroke-neutral-950/5 [mask-image:linear-gradient(to_bottom_left,white_40%,transparent_50%)]"
            yOffset={-96}
            interactive
          />
          <main className="w-full flex-auto pt-20">{children}</main>
          <ErrorBoundary>
            <Footer />
          </ErrorBoundary>
        </motion.div>
      </motion.div>
    </MotionConfig>
  )
}
export function RootLayout({ children }: { children: React.ReactNode }) {
  let pathname = usePathname()
  let [logoHovered, setLogoHovered] = useState(false)
  return (
    <RootLayoutContext.Provider value={{ logoHovered, setLogoHovered }}>
      <RootLayoutInner key={pathname}>{children}</RootLayoutInner>
    </RootLayoutContext.Provider>
  )
}

================
File: src/components/ui/Section.tsx
================
import clsx from 'clsx'
type SectionProps<T extends React.ElementType> = {
  as?: T
  className?: string
  children: React.ReactNode
}
export function Section<T extends React.ElementType = 'section'>({
  as,
  className,
  children,
}: Omit<React.ComponentPropsWithoutRef<T>, keyof SectionProps<T>> &
  SectionProps<T>) {
  let Component = as ?? 'section'
  return (
    <Component className={clsx('pb-16', className)}>
      <div>{children}</div>
    </Component>
  )
}

================
File: src/components/ui/select.tsx
================
'use client'
import * as React from 'react'
import {
  CaretSortIcon,
  CheckIcon,
  ChevronDownIcon,
  ChevronUpIcon,
} from '@radix-ui/react-icons'
import * as SelectPrimitive from '@radix-ui/react-select'
import { cn } from '@/lib/utils'
const Select = SelectPrimitive.Root
const SelectGroup = SelectPrimitive.Group
const SelectValue = SelectPrimitive.Value
const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      'flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-neutral-200 bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-white placeholder:text-neutral-500 focus:outline-none focus:ring-1 focus:ring-neutral-950 disabled:cursor-not-allowed disabled:opacity-50 dark:border-neutral-800 dark:ring-offset-neutral-950 dark:placeholder:text-neutral-400 dark:focus:ring-neutral-300 [&>span]:line-clamp-1',
      className,
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <CaretSortIcon className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName
const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      'flex cursor-default items-center justify-center py-1',
      className,
    )}
    {...props}
  >
    <ChevronUpIcon />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName
const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      'flex cursor-default items-center justify-center py-1',
      className,
    )}
    {...props}
  >
    <ChevronDownIcon />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName
const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = 'popper', ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        'relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border border-neutral-200 bg-white text-neutral-950 shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 dark:border-neutral-800 dark:bg-neutral-950 dark:text-neutral-50',
        position === 'popper' &&
          'data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1',
        className,
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          'p-1',
          position === 'popper' &&
            'h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]',
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName
const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn('px-2 py-1.5 text-sm font-semibold', className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName
const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      'relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-neutral-100 focus:text-neutral-900 data-[disabled]:pointer-events-none data-[disabled]:opacity-50 dark:focus:bg-neutral-800 dark:focus:text-neutral-50',
      className,
    )}
    {...props}
  >
    <span className="absolute right-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <CheckIcon className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName
const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn(
      '-mx-1 my-1 h-px bg-neutral-100 dark:bg-neutral-800',
      className,
    )}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName
export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

================
File: src/components/ui/StatList.tsx
================
import { Border } from '@/components/ui/Border'
import { FadeIn, FadeInStagger } from '@/components/ui/FadeIn'
export function StatList({
  children,
  ...props
}: Omit<React.ComponentPropsWithoutRef<typeof FadeInStagger>, 'children'> & {
  children: React.ReactNode
}) {
  return (
    <FadeInStagger {...props}>
      <dl className="grid grid-cols-1 gap-10 sm:grid-cols-2 lg:auto-cols-fr lg:grid-flow-col lg:grid-cols-none">
        {children}
      </dl>
    </FadeInStagger>
  )
}
export function StatListItem({
  label,
  value,
}: {
  label: string
  value: string
}) {
  return (
    <Border as={FadeIn} position="left" className="flex flex-col-reverse pl-8">
      <dt className="mt-2 text-base text-neutral-600">{label}</dt>
      <dd className="font-display text-3xl font-semibold text-neutral-950 sm:text-4xl">
        {value}
      </dd>
    </Border>
  )
}

================
File: src/components/ui/textarea.tsx
================
import * as React from 'react'
import { cn } from '@/lib/utils'
export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}
const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          'flex min-h-[60px] w-full rounded-md border border-neutral-200 bg-transparent px-3 py-2 text-sm shadow-sm placeholder:text-neutral-500 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-neutral-950 disabled:cursor-not-allowed disabled:opacity-50 dark:border-neutral-800 dark:placeholder:text-neutral-400 dark:focus-visible:ring-neutral-300',
          className,
        )}
        ref={ref}
        {...props}
      />
    )
  },
)
Textarea.displayName = 'Textarea'
export { Textarea }

================
File: src/components/ui/toast.tsx
================
'use client'
import * as React from 'react'
import { Cross2Icon } from '@radix-ui/react-icons'
import * as ToastPrimitives from '@radix-ui/react-toast'
import { cva, type VariantProps } from 'class-variance-authority'
import { cn } from '@/lib/utils'
const ToastProvider = ToastPrimitives.Provider
const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      'fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]',
      className,
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName
const toastVariants = cva(
  'group pointer-events-auto relative flex w-full items-center justify-between space-x-2 overflow-hidden rounded-md border border-neutral-200 p-4 pr-6 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full dark:border-neutral-800',
  {
    variants: {
      variant: {
        default:
          'border bg-white text-neutral-950 dark:bg-neutral-950 dark:text-neutral-50',
        success:
          'border-green-500 bg-green-500 text-neutral-50 dark:border-green-900 dark:bg-green-900 dark:text-neutral-50',
        destructive:
          'destructive group border-red-500 bg-red-500 text-neutral-50 dark:border-red-900 dark:bg-red-900 dark:text-neutral-50',
      },
    },
    defaultVariants: {
      variant: 'default',
    },
  },
)
const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName
const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      'inline-flex h-8 shrink-0 items-center justify-center rounded-md border border-neutral-200 bg-transparent px-3 text-sm font-medium transition-colors hover:bg-neutral-100 focus:outline-none focus:ring-1 focus:ring-neutral-950 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-neutral-100/40 group-[.destructive]:hover:border-red-500/30 group-[.destructive]:hover:bg-red-500 group-[.destructive]:hover:text-neutral-50 group-[.destructive]:focus:ring-red-500 dark:border-neutral-800 dark:hover:bg-neutral-800 dark:focus:ring-neutral-300 dark:group-[.destructive]:border-neutral-800/40 dark:group-[.destructive]:hover:border-red-900/30 dark:group-[.destructive]:hover:bg-red-900 dark:group-[.destructive]:hover:text-neutral-50 dark:group-[.destructive]:focus:ring-red-900',
      className,
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName
const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      'absolute right-1 top-1 rounded-md p-1 text-neutral-950/50 opacity-0 transition-opacity hover:text-neutral-950 focus:opacity-100 focus:outline-none focus:ring-1 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600 dark:text-neutral-50/50 dark:hover:text-neutral-50',
      className,
    )}
    toast-close=""
    {...props}
  >
    <Cross2Icon className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName
const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn('text-sm font-semibold [&+div]:text-xs', className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName
const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn('text-sm opacity-90', className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName
type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>
type ToastActionElement = React.ReactElement<typeof ToastAction>
export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}

================
File: src/components/ui/toaster.tsx
================
'use client'
import { useToast } from '@/hooks/use-toast'
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from '@/components/ui/toast'
export function Toaster() {
  const { toasts } = useToast()
  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}

================
File: src/components/ui/TopTip.tsx
================
import React from 'react'
import clsx from 'clsx'
import { Border } from '@/components/ui/Border'
interface TopTipProps {
  children: React.ReactNode
  className?: string
}
const TopTip: React.FC<TopTipProps> = ({ children, className }) => {
  return (
    <Border position="left" className={clsx('my-10 pl-8', className)}>
      <p className="font-display text-sm font-bold uppercase tracking-widest text-neutral-950">
        Top tip
      </p>
      <div className="mt-4">{children}</div>
    </Border>
  )
}
export default TopTip

================
File: src/hooks/use-toast.ts
================
'use client'
import * as React from 'react'
import type { ToastActionElement, ToastProps } from '@/components/ui/toast'
const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000
type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}
const actionTypes = {
  ADD_TOAST: 'ADD_TOAST',
  UPDATE_TOAST: 'UPDATE_TOAST',
  DISMISS_TOAST: 'DISMISS_TOAST',
  REMOVE_TOAST: 'REMOVE_TOAST',
} as const
let count = 0
function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}
type ActionType = typeof actionTypes
type Action =
  | {
      type: ActionType['ADD_TOAST']
      toast: ToasterToast
    }
  | {
      type: ActionType['UPDATE_TOAST']
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType['DISMISS_TOAST']
      toastId?: ToasterToast['id']
    }
  | {
      type: ActionType['REMOVE_TOAST']
      toastId?: ToasterToast['id']
    }
interface State {
  toasts: ToasterToast[]
}
const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()
const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }
  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: 'REMOVE_TOAST',
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)
  toastTimeouts.set(toastId, timeout)
}
export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case 'ADD_TOAST':
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }
    case 'UPDATE_TOAST':
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t,
        ),
      }
    case 'DISMISS_TOAST': {
      const { toastId } = action
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t,
        ),
      }
    }
    case 'REMOVE_TOAST':
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}
const listeners: Array<(state: State) => void> = []
let memoryState: State = { toasts: [] }
function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}
type Toast = Omit<ToasterToast, 'id'>
function toast({ ...props }: Toast) {
  const id = genId()
  const update = (props: ToasterToast) =>
    dispatch({
      type: 'UPDATE_TOAST',
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: 'DISMISS_TOAST', toastId: id })
  dispatch({
    type: 'ADD_TOAST',
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })
  return {
    id: id,
    dismiss,
    update,
  }
}
function useToast() {
  const [state, setState] = React.useState<State>(memoryState)
  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])
  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: 'DISMISS_TOAST', toastId }),
  }
}
export { useToast, toast }

================
File: src/hooks/useSWRConfig.ts
================
import { SWRConfiguration } from 'swr'
export const swrConfig: SWRConfiguration = {
  revalidateOnFocus: false,
  revalidateIfStale: false,
  dedupingInterval: 600000,
  focusThrottleInterval: 5000,
  errorRetryCount: 3,
  fetcher: async (url: string) => {
    const res = await fetch(url, {
      headers: {
        'Cache-Control': 'max-age=3600, s-maxage=3600, stale-while-revalidate',
      },
    })
    if (!res.ok) {
      const error = new Error('An error occurred while fetching the data.')
      throw error
    }
    return res.json()
  },
}

================
File: src/i18n/request.ts
================
import { notFound } from 'next/navigation'
import { getRequestConfig } from 'next-intl/server'
import { routing } from './routing'
export default getRequestConfig(async ({ locale }) => {
  if (!routing.locales.includes(locale as any)) notFound()
  return {
    messages: (await import(`../../messages/${locale}.json`)).default,
  }
})

================
File: src/i18n/routing.ts
================
import { defineRouting } from 'next-intl/routing'
import { createSharedPathnamesNavigation } from 'next-intl/navigation'
export const routing = defineRouting({
  locales: ['fr', 'en'],
  localePrefix: 'as-needed',
  defaultLocale: 'fr',
})
export const { Link, redirect, usePathname, useRouter } =
  createSharedPathnamesNavigation(routing)

================
File: src/lib/componentResolver.tsx
================
import FeaturesSection from '@/components/sections/dynamic/Features/FeaturesSection'
import PostsSection from '@/components/sections/dynamic/Posts/PostsSection'
import ProjectsSection from '@/components/sections/dynamic/Projects/ProjectsSection'
import ServicesSection from '@/components/sections/dynamic/Services/ServiceSection'
import TeamsSection from '@/components/sections/dynamic/Teams/TeamsCardSection'
import ReferenceSection from '@/components/sections/dynamic/References/ReferenceSection'
import ContactSection from '@/components/sections/dynamic/Contact/ContactSection'
import CultureSection from '@/components/sections/dynamic/Culture/CultureSection'
import TestimonialSection from '@/components/sections/dynamic/TestimonialSection'
import PageIntroSection from '@/components/sections/dynamic/PageIntro/PageIntroSection'
import HeroSection from '@/components/sections/dynamic/Hero/HeroSection'
import CTASection from '@/components/sections/dynamic/CTA/CTA'
import PricingSection from '@/components/sections/dynamic/PricingSection/PricingSection'
import BasicMarkdown from '@/components/ui/BasicMarkdown'
import { Section } from '@/components/ui/Section'
export const componentResolver = ({
  section,
  designType,
}: {
  section: any
  designType: number
}) => {
  switch (section.__component) {
    case 'section.text-section':
      return (
        <Section className="m-auto max-w-5xl">
          {section.title && (
            <h2 className="text-2xl font-semibold">{section.title}</h2>
          )}
          <BasicMarkdown content={section.content} />
        </Section>
      )
    case 'section.blog-section':
      return (
        <PostsSection
          key={section.id}
          postsSection={section}
          designType={designType}
        />
      )
    case 'section.projects-section':
      return (
        <ProjectsSection
          key={section.id}
          projectsSection={section}
          designType={designType}
        />
      )
    case 'section.services-section':
      return (
        <ServicesSection
          key={section.id}
          servicesSection={section}
          designType={designType}
        />
      )
    case 'section.reference-section':
      return (
        <ReferenceSection
          key={section.id}
          referenceSection={section}
          designType={designType}
        />
      )
    case 'section.cta':
      return (
        <CTASection
          key={section.id}
          ctaSection={section}
          designType={designType}
        />
      )
    case 'section.pricing-section':
      return (
        <PricingSection
          key={section.id}
          pricingSection={section}
          designType={designType}
        />
      )
    case 'section.team-section':
      return (
        <TeamsSection
          key={section.id}
          teamsSection={section}
          designType={designType}
        />
      )
    case 'section.culture-section':
      return (
        <CultureSection
          key={section.id}
          culturesSection={section}
          designType={designType}
        />
      )
    case 'section.contact-section':
      return (
        <ContactSection
          key={section.id}
          contactSection={section}
          designType={designType}
        />
      )
    case 'section.page-intro':
      return (
        <PageIntroSection
          key={section.id}
          pageIntroSection={section}
          designType={designType}
        />
      )
    case 'section.features-section':
      return (
        <FeaturesSection
          key={section.id}
          featuresSection={section}
          designType={designType}
        />
      )
    case 'section.hero-section':
      return (
        <>
          <HeroSection
            key={section.id}
            heroSection={section}
            designType={designType}
          />
          {
}
        </>
      )
    case 'section.testimonials':
      return (
        <TestimonialSection testimonialSection={section} key={section.id} />
      )
    default:
      return null
  }
}

================
File: src/lib/helper.ts
================
import { format, Locale } from 'date-fns'
import { enUS, fr } from 'date-fns/locale'
export function formatDate(date: Date, localeCode = 'fr'): string {
  const newDate = new Date(date)
  let formattedDate: string
  switch (localeCode) {
    case 'en':
      formattedDate = format(newDate, 'dd MMM yyyy', { locale: enUS })
      break
    case 'fr':
      formattedDate = format(newDate, 'dd MMM yyyy', { locale: fr })
      break
    default:
      formattedDate = format(newDate, 'dd MMM yyyy', { locale: fr })
      break
  }
  return formattedDate
}
export function formatDateTime(date: Date, localeCode = 'fr'): string {
  const newDate = new Date(date)
  let formattedDate: string
  switch (localeCode) {
    case 'en':
      formattedDate = format(newDate, 'PPP HH:mm', { locale: enUS })
      break
    case 'fr':
      formattedDate = format(newDate, 'PPP HH:mm', { locale: fr })
      break
    default:
      formattedDate = format(newDate, 'PPP HH:mm', { locale: fr })
      break
  }
  return formattedDate
}
export function localeToDateLocale(locale: string): Locale {
  switch (locale) {
    case 'en':
      return enUS
    case 'fr':
      return fr
    default:
      return fr
  }
}
export function truncateWithEllipses(text: any, max: number) {
  return text?.substr(0, max - 1) + (text?.length > max ? '...' : '')
}

================
File: src/lib/seo.ts
================
import { SeoData } from '@/types/global'
import { Metadata } from 'next'
interface GenerateMetadataOptions {
  data: SeoData | null
  type: 'project' | 'service' | 'blog'
  id: string
  siteName?: string
}
interface SlugPageData {
  data: Array<SeoData>
}
interface GenerateSlugMetadataOptions {
  page: SlugPageData | null
  siteName?: string
}
export function generatePageMetadata({
  data,
  type,
  id,
  siteName = 'Tagadart',
}: GenerateMetadataOptions): Metadata {
  if (!data) {
    return {
      title: `${type.charAt(0).toUpperCase() + type.slice(1)} not found`,
    }
  }
  const title = data?.seo?.metaTitle
    ? `${data?.seo?.metaTitle} - ${siteName}`
    : `${data?.pageIntro?.title} - ${siteName}`
  const basePath = {
    project: 'projects',
    service: 'services',
    blog: 'blog',
  }[type]
  return {
    title,
    description: data?.seo?.metaDescription || data?.pageIntro?.content,
    openGraph: {
      title: title,
      description: data?.seo?.metaDescription || data?.pageIntro?.content,
      images: data?.pageIntro?.cover?.url
        ? [
            {
              url: data?.pageIntro?.cover.url,
              width: 800,
              height: 600,
              alt: data.pageIntro.title,
            },
          ]
        : [],
    },
    alternates: {
      canonical: `/${basePath}/${id}`,
    },
  }
}
export function generateSlugPageMetadata({
  page,
}: GenerateSlugMetadataOptions): Metadata {
  if (!page?.data?.[0]) {
    return {
      title: 'Page not found',
    }
  }
  const pageData = page.data[0]
  return {
    title: pageData?.seo?.metaTitle,
    description: pageData?.seo?.metaDescription,
    openGraph: {
      title: pageData?.seo?.metaTitle,
      description: pageData?.seo?.metaDescription,
      images: pageData?.seo?.metaImage?.url
        ? [
            {
              url: pageData.seo.metaImage.url,
              width: 800,
              height: 600,
              alt:
                pageData.seo.metaImage.alternativeText ||
                pageData?.seo?.metaTitle ||
                '',
            },
          ]
        : [],
    },
  }
}

================
File: src/lib/utils.ts
================
import { clsx, type ClassValue } from 'clsx'
import { twMerge } from 'tailwind-merge'
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: src/middleware.ts
================
import createMiddleware from 'next-intl/middleware'
import { routing } from './i18n/routing'
export default createMiddleware(routing)
export const config = {
  matcher: [
    '/((?!api|_next|_vercel|.*\\..*).*)',
  ],
}

================
File: src/request/fetch.tsx
================
import { fetchAxiosAPI } from '@/request/request'
import { RestQueryParams } from '@/types/global'
import { createQueryParams } from './populate'
export async function fetchPageBySlug(slug: string, lang: string) {
  const querySlug = slug === undefined ? 'home' : slug
  const path = '/pages'
  const queryParams = {
    ...createQueryParams('pages'),
    filters: {
      slug: {
        $eq: querySlug,
      },
    },
    locale: lang,
  }
  try {
    const pageData = await fetchAxiosAPI(path, queryParams)
    return pageData
  } catch (error) {
    console.error('Failed to load page data:', error)
    throw error
  }
}
export async function fetchPosts() {
  const queryParams = createQueryParams('posts')
  try {
    const postsData = await fetchAxiosAPI('posts', queryParams)
    return postsData?.data
  } catch (error) {
    console.error('Failed to load posts data:', error)
    throw error
  }
}
export async function fetchPost(slug: string) {
  const queryParams = createQueryParams('posts')
  try {
    const postData = await fetchAxiosAPI(`/posts/${slug}`, queryParams)
    return postData?.data
  } catch (error) {
    console.error('Failed to load post:', error)
    throw error
  }
}
export async function fetchProjects() {
  const queryParams = createQueryParams('projects')
  try {
    const projectsData = await fetchAxiosAPI('projects', queryParams)
    return projectsData?.data
  } catch (error) {
    console.error('Failed to load projects data:', error)
    throw error
  }
}
export async function fetchProject(slug: string) {
  const queryParams = createQueryParams('projects')
  try {
    const projectsData = await fetchAxiosAPI(`/projects/${slug}`, queryParams)
    return projectsData?.data
  } catch (error) {
    console.error('Failed to load projects data:', error)
    throw error
  }
}
export async function fetchServices() {
  const queryParams = createQueryParams('services')
  try {
    const servicesData = await fetchAxiosAPI('our-services', queryParams)
    return servicesData?.data
  } catch (error) {
    console.error('Failed to load services data:', error)
    throw error
  }
}
export async function fetchService(slug: string) {
  const queryParams = createQueryParams('services')
  try {
    const serviceData = await fetchAxiosAPI(
      `/our-services/${slug}`,
      queryParams,
    )
    return serviceData?.data
  } catch (error) {
    console.error('Failed to load service:', error)
    throw error
  }
}
export async function fetchClients() {
  const populateClients = ['logo']
  const queryParams: RestQueryParams = {
    populate: populateClients,
    publicationState: 'live',
    pagination: {
      page: 1,
      pageSize: 10,
    },
  }
  try {
    const clientsData = await fetchAxiosAPI('clients', queryParams)
    return clientsData?.data
  } catch (error) {
    console.error('Failed to load services data:', error)
    throw error
  }
}
export async function fetchClient(id: string) {
  const populateClients = ['logo']
  const queryParams: RestQueryParams = {
    populate: populateClients,
    publicationState: 'live',
    pagination: {
      page: 1,
      pageSize: 10,
    },
  }
  try {
    const clientsData = await fetchAxiosAPI(`clients/${id}`, queryParams)
    return clientsData?.data
  } catch (error) {
    console.error('Failed to load services data:', error)
    throw error
  }
}

================
File: src/request/Fetcher.tsx
================
'use client'
import React, { ReactNode, useEffect, useState } from 'react'
import useSWR, { KeyedMutator, SWRConfig } from 'swr'
import { swrConfig } from '@/hooks/useSWRConfig'
import { defaultQueryParams, fetchUseSWR } from '@/request/request'
import { Data, RestQueryParams } from '@/types/global'
import * as qs from 'qs'
interface FetcherChildProps<T> {
  data: Data
  currentPage: number
  totalPages: number
  goToPage: (page: number) => void
  isLoading: boolean
  mutate: KeyedMutator<T>
  hasNextPage: boolean
  loadMore: () => void
}
interface FetcherProps<T> {
  url: string
  sort?: string
  populate?: string | object
  filters?: []
  paginationMode?: 'infinite' | 'pagination' | 'off'
  params?: RestQueryParams
  children: (fetchData: FetcherChildProps<T>) => ReactNode
}
const optimizedFetcherConfig = {
  suspense: true,
  revalidateOnMount: false,
  revalidateIfStale: false,
  refreshInterval: 30000,
}
function Fetcher<T>({
  url,
  children,
  params = defaultQueryParams,
  filters,
  paginationMode,
  sort,
  populate,
}: FetcherProps<T>) {
  const [currentPage, setCurrentPage] = useState(1)
  const [accumulatedData, setAccumulatedData] = useState<Data>()
  const effectiveFilters = { ...params.filters, ...filters }
  const effectivePopulate = 'pageIntro.cover'
  const effectiveSort = sort || params.sort
  const effectiveParams = {
    ...params,
    filters: effectiveFilters,
    sort: effectiveSort,
    populate: effectivePopulate,
    pagination:
      paginationMode === 'off'
        ? undefined
        : { ...params.pagination, page: currentPage },
  }
  const queryString = qs.stringify(effectiveParams, {
    encode: false,
    arrayFormat: 'indices',
    allowDots: false,
  })
  const { data, error, mutate } = useSWR<any>(
    `${url}?${queryString}`,
    fetchUseSWR,
    optimizedFetcherConfig,
  )
  const hasNextPage =
    data?.meta?.pagination?.page < data?.meta?.pagination?.pageCount
  const goToPage = (pageNum: number) => {
    setCurrentPage(pageNum)
  }
  useEffect(() => {
    if (data) {
      if (paginationMode === 'infinite') {
        setAccumulatedData((prevData) => ({
          data: prevData ? [...prevData.data, ...data.data] : [...data.data],
          meta: data.meta,
        }))
      } else {
        setAccumulatedData(data)
      }
    }
  }, [data, paginationMode])
  const loadMore = () => {
    if (hasNextPage) {
      setCurrentPage((prev) => prev + 1)
    }
  }
  if (error) return <div>Error loading data...</div>
  const mergedConfig = {
    ...swrConfig,
    ...optimizedFetcherConfig,
  }
  return (
    <SWRConfig value={mergedConfig}>
      {accumulatedData
        ? children({
            data: accumulatedData,
            currentPage,
            goToPage,
            isLoading: !data && !error,
            mutate,
            totalPages: data?.meta?.pagination?.pageCount || 0,
            loadMore,
            hasNextPage,
          })
        : null}
    </SWRConfig>
  )
}
export default Fetcher

================
File: src/request/populate.ts
================
import { RestQueryParams } from '@/types/global'
export const structurePopulate = {
  structure: {
    on: {
      'section.blog-section': {
        populate: [
          'sectionIntro',
          'posts',
          'posts.pageIntro',
          'posts.pageIntro.cover',
          'posts.author',
          'posts.author.avatar',
        ],
      },
      'section.text-section': {
        populate: '*',
      },
      'section.projects-section': {
        populate: [
          'sectionIntro',
          'projects',
          'projects.pageIntro',
          'projects.pageIntro.cover',
          'projects.logo',
        ],
      },
      'section.contact-section': {
        populate: [
          'sectionIntro',
          'content',
          'content.offices',
          'content.emails',
          'content.socials',
        ],
      },
      'section.services-section': {
        populate: [
          'sectionIntro',
          'our_services',
          'our_services.pageIntro',
          'our_services.pageIntro.cover',
        ],
      },
      'section.pricing-section': {
        populate: ['sectionIntro', 'cards', 'cards.features'],
      },
      'section.team-section': {
        populate: [
          'sectionIntro',
          'members',
          'members.fullname',
          'members.avatar',
          'members.posts.pageIntro',
        ],
      },
      'section.reference-section': {
        populate: ['sectionIntro', 'clients', 'clients.name', 'clients.logo'],
      },
      'section.culture-section': {
        populate: ['sectionIntro', 'values', 'values.title'],
      },
      'section.cta': {
        populate: ['sectionIntro', 'buttons'],
      },
      'section.page-intro': {
        populate: ['title', 'eyebrow', 'content', 'cover'],
      },
      'section.features-section': {
        populate: ['sectionIntro', 'features'],
      },
      'section.testimonials': {
        populate: [
          'sectionIntro',
          'testimonials',
          'testimonials.pageIntro',
          'testimonials.pageIntro.cover',
          'testimonials.author',
          'testimonials.author.avatar',
          'testimonials.member',
          'testimonials.member.fullname',
          'testimonials.member.avatar',
        ],
      },
      'section.hero-section': {
        populate: ['sectionIntro', 'sectionIntro.cover', 'buttons', 'logo'],
      },
    },
  },
}
export const collectionPopulates = {
  projects: {
    pageIntro: {
      populate: ['cover'],
    },
    logo: {
      populate: '*',
    },
    seo: {
      populate: ['metaTitle', 'metaDescription', 'metaImage.url'],
    },
  },
  services: {
    pageIntro: {
      populate: ['cover'],
    },
    seo: {
      populate: ['metaTitle', 'metaDescription', 'metaImage.url'],
    },
  },
  posts: {
    pageIntro: {
      populate: ['cover'],
    },
    author: {
      populate: ['avatar'],
    },
    seo: {
      populate: ['metaTitle', 'metaDescription', 'metaImage.url'],
    },
  },
  pages: {
    seo: {
      populate: ['metaTitle', 'metaDescription', 'metaImage.url'],
    },
  },
}
export const createQueryParams = (
  collection: keyof typeof collectionPopulates,
  includeStructure = true,
): RestQueryParams => {
  return {
    populate: {
      ...(collectionPopulates[collection] || {}),
      ...(includeStructure ? structurePopulate : {}),
    },
    publicationState: 'live',
    pagination: {
      page: 1,
      pageSize: 10,
    },
  }
}

================
File: src/request/request.tsx
================
import axios, { AxiosRequestHeaders, AxiosResponse } from 'axios'
import { BaseData, RestQueryParams } from '@/types/global'
const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://127.0.0.1:1337'
axios.defaults.baseURL = `${API_URL}/api`
export const defaultQueryParams: RestQueryParams = {
  sort: 'id:desc',
  populate: '*',
  publicationState: 'preview',
  pagination: {
    page: 1,
    pageSize: 10,
  },
}
export async function fetchUseSWR(
  path: string,
  userToken?: string | null,
): Promise<BaseData> {
  const headers: any = {}
  if (userToken) {
    headers.Authorization = `Bearer ${userToken}`
  }
  try {
    const response = await axios.get(`${path}`, { headers })
    return response.data
  } catch (err) {
    console.error(err, 'fetchUseSWR fetching error, path:', path)
    throw err
  }
}
export async function fetchAxiosAPI(
  path: string,
  params = defaultQueryParams,
  userToken?: string | null,
) {
  const headers: any = {}
  if (userToken) {
    headers.Authorization = `Bearer ${userToken}`
  }
  try {
    const response = await axios.get(`${path}`, { headers, params })
    return response.data
  } catch (err) {
    console.error(err, 'fetchAxiosAPI fetching error, path:', path)
  }
}
export async function postAxiosAPI<T = any>(
  path: string,
  data: FormData | Record<string, unknown>,
  userToken?: string | null,
): Promise<AxiosResponse<T>> {
  const headers = {} as AxiosRequestHeaders
  if (userToken) {
    headers.Authorization = `Bearer ${userToken}`
  }
  try {
    const response = await axios.post<T>(path, data, { headers })
    return response
  } catch (err) {
    console.error('Axios Post error, path:', path, err)
    throw err
  }
}
export async function putAxiosAPI<T = any>(
  path: string,
  data: FormData | Record<string, unknown>,
  userToken?: string | null,
): Promise<AxiosResponse<T>> {
  const headers: AxiosRequestHeaders = {} as AxiosRequestHeaders
  if (userToken) {
    headers.Authorization = `Bearer ${userToken}`
  }
  try {
    const response = await axios.put<T>(path, data, { headers })
    return response
  } catch (err) {
    console.error('Axios Post error, path:', path, err)
    throw err
  }
}
export async function deleteAxiosAPI(path: string, userToken?: string | null) {
  const headers: any = {}
  if (userToken) {
    headers.Authorization = `Bearer ${userToken}`
  }
  try {
    const response = await axios.delete(path, { headers })
    return response
  } catch (err) {
    console.error(err, 'Axios Delete error, path:', path)
    throw err
  }
}

================
File: src/styles/base.css
================
@tailwind base;
.markdown-content {
  @apply prose prose-slate max-w-none;
  h1 {
    @apply mb-4 mt-6 text-4xl font-bold;
  }
  h2 {
    @apply mb-3 mt-5 text-3xl font-bold;
  }
  h3 {
    @apply mb-2 mt-4 text-2xl font-bold;
  }
  h4 {
    @apply mb-2 mt-3 text-xl font-bold;
  }
  h5 {
    @apply mb-1 mt-2 text-lg font-bold;
  }
  h6 {
    @apply mb-1 mt-2 text-base font-bold;
  }
  ul {
    list-style-type: disc !important;
    margin: 0.75rem 0 !important;
    padding-left: 1.5rem !important;
    li {
      list-style-type: disc !important;
      padding-left: 0 !important;
      &::before {
        display: none;
      }
    }
    .ql-indent-1 {
      list-style-type: circle !important;
      margin-left: 1.5rem !important;
    }
    .ql-indent-2 {
      list-style-type: square !important;
      margin-left: 3rem !important;
    }
  }
  ol {
    list-style-type: decimal;
    margin: 0.75rem 0;
    padding-left: 1.5rem;
    counter-reset: list-1;
    > li {
      list-style: none;
      counter-increment: list-1;
      position: relative;
      &::before {
        content: counter(list-1) '.';
        position: absolute;
        left: -1.5rem;
      }
    }
    li.ql-indent-1 {
      counter-increment: list-2;
      margin-left: 2.5em;
      list-style: none;
      &::before {
        content: counter(list-2, lower-alpha) '.';
        position: absolute;
        left: -1.5rem;
      }
    }
    li.ql-indent-2 {
      counter-increment: list-3;
      margin-left: 4em;
      list-style: none;
      &::before {
        content: counter(list-3, lower-roman) '.';
        position: absolute;
        left: -1.5rem;
      }
    }
  }
  ol li {
    display: block;
  }
  ol li::marker {
    content: none;
  }
  .ql-indent-1 {
    margin-left: 2em !important;
    padding-left: 0 !important;
  }
  .ql-indent-2 {
    margin-left: 4em !important;
    padding-left: 0 !important;
  }
  p {
    @apply my-3;
  }
  a {
    @apply text-primary-600 underline hover:text-primary-700;
  }
  img {
    @apply my-4 h-auto max-w-full rounded-lg;
  }
  .ql-align-center {
    @apply text-center;
  }
  .ql-align-right {
    @apply text-right;
  }
  .ql-align-justify {
    @apply text-justify;
  }
  .ql-video {
    @apply my-4 aspect-video w-full;
    max-width: 100%;
  }
  .ql-video.ql-align-center {
    @apply mx-auto block;
  }
  .ql-video.ql-align-right {
    @apply ml-auto block;
  }
  strong,
  b,
  .ql-bold {
    @apply font-bold !important;
  }
  em,
  i,
  .ql-italic {
    @apply italic !important;
  }
  u,
  .ql-underline {
    @apply underline !important;
  }
  .ql-bold.ql-italic {
    @apply font-bold italic !important;
  }
  [class*='ql-size'] {
    @apply leading-normal;
  }
  .ql-size-small {
    @apply text-sm;
  }
  .ql-size-large {
    @apply text-lg;
  }
  .ql-size-huge {
    @apply text-xl;
  }
  blockquote {
    @apply my-4 border-l-4 border-gray-200 pl-4 italic;
  }
  pre {
    @apply my-4 overflow-x-auto rounded-lg bg-gray-100 p-4;
  }
  code {
    @apply rounded bg-gray-100 px-1 py-0.5;
  }
}
@layer base {
  :root {
    --radius: 0.5rem;
  }
}

================
File: src/styles/components.css
================
@tailwind components;
@import './typography.css';

================
File: src/styles/tailwind.css
================
@import './base.css';
@import './components.css';
@import './utilities.css';
.main_content img {
    border-radius: 20px;
    transition: 0.5s;
    filter: grayscale(0.8);
}
.main_content img:hover {
    filter: grayscale(1);
}

================
File: src/styles/typography.css
================
.typography {
  color: theme(colors.neutral.950);
  font-size: theme(fontSize.xl);
  line-height: theme(fontSize.xl[1].lineHeight);
  --shiki-color-text: theme(colors.white);
  --shiki-color-background: theme(colors.neutral.950);
  --shiki-token-constant: theme(colors.neutral.300);
  --shiki-token-string: theme(colors.neutral.400);
  --shiki-token-comment: theme(colors.neutral.500);
  --shiki-token-keyword: theme(colors.neutral.400);
  --shiki-token-parameter: theme(colors.neutral.400);
  --shiki-token-function: theme(colors.neutral.300);
  --shiki-token-string-expression: theme(colors.neutral.300);
  --shiki-token-punctuation: theme(colors.neutral.400);
  :where(.typography > *) {
    margin-top: theme(spacing.6);
    margin-bottom: theme(spacing.6);
  }
  :where(h2) {
    font-weight: theme(fontWeight.semibold);
    font-family: theme(fontFamily.display);
    font-size: theme(fontSize.2xl);
    line-height: theme(fontSize.2xl[1].lineHeight);
    margin-top: theme(spacing.16);
  }
  :where(h3) {
    font-weight: theme(fontWeight.semibold);
    font-family: theme(fontFamily.display);
    font-size: theme(fontSize.xl);
    line-height: theme(fontSize.xl[1].lineHeight);
    margin-top: theme(spacing.10);
  }
  :where(h2 + h3) {
    margin-top: 0;
  }
  :where(ul, ol) {
    padding-left: 1.5rem;
  }
  :where(ul) {
    list-style-type: disc;
  }
  :where(ol) {
    list-style-type: decimal;
  }
  :where(li) {
    padding-left: theme(spacing.3);
    margin-top: theme(spacing.6);
  }
  :where(li)::marker {
    color: theme(colors.neutral.500);
  }
  :where(li > *),
  :where(li li) {
    margin-top: theme(spacing.4);
  }
  :where(ol > li)::marker {
    font-size: theme(fontSize.base);
    font-weight: theme(fontWeight.semibold);
  }
  :where(table) {
    width: 100%;
    text-align: left;
    font-size: theme(fontSize.base);
    line-height: theme(fontSize.base[1].lineHeight);
  }
  :where(th) {
    font-weight: theme(fontWeight.semibold);
  }
  :where(thead th) {
    padding-bottom: theme(spacing.6);
    border-bottom: 1px solid theme(colors.neutral.950);
  }
  :where(td) {
    vertical-align: top;
    padding-top: theme(spacing.6);
    padding-bottom: theme(spacing.6);
    border-bottom: 1px solid theme(colors.neutral.950 / 0.1);
  }
  :where(:is(th, td):not(:last-child)) {
    padding-right: theme(spacing.6);
  }
  :where(pre) {
    display: flex;
    background-color: theme(colors.neutral.950);
    border-radius: theme(borderRadius.4xl);
    overflow-x: auto;
    margin-top: theme(spacing.10);
    margin-bottom: theme(spacing.10);
    margin-left: calc(-1 * theme(spacing.6));
    margin-right: calc(-1 * theme(spacing.6));
    @screen sm {
      margin-left: auto;
      margin-right: auto;
    }
  }
  :where(pre code) {
    flex: none;
    padding: theme(padding.8) theme(padding.6);
    font-size: theme(fontSize.base);
    line-height: theme(lineHeight.8);
    color: theme(colors.white);
    @screen sm {
      padding: theme(spacing.10);
    }
  }
  :where(hr) {
    border-color: theme(colors.neutral.950 / 0.1);
    margin-top: theme(spacing.24);
    margin-bottom: theme(spacing.24);
  }
  :where(a) {
    text-decoration: underline;
    text-decoration-thickness: 1px;
    text-underline-offset: 0.15em;
    text-decoration-skip-ink: none;
    font-weight: theme(fontWeight.semibold);
  }
  :where(strong) {
    font-weight: theme(fontWeight.semibold);
  }
  :where(code:not(pre code)) {
    font-size: calc(18 / 20 * 1em);
    font-weight: theme(fontWeight.semibold);
    &::before,
    &::after {
      content: '`';
    }
  }
  :where(h2 code, h3 code) {
    font-weight: theme(fontWeight.bold);
  }
  :where(figure) {
    margin-top: theme(spacing.32);
    margin-bottom: theme(spacing.32);
  }
  :where(.typography:first-child > :first-child),
  :where(li > :first-child) {
    margin-top: 0 !important;
  }
  :where(.typography:last-child > :last-child),
  :where(li > :last-child) {
    margin-bottom: 0 !important;
  }
}

================
File: src/styles/utilities.css
================
@tailwind utilities;

================
File: src/types/client.ts
================
import { MediaItem } from '@/types/global'
export interface Client {
  id: string
  name: string
  logo: MediaItem
  link: string
}

================
File: src/types/contact.ts
================
import { PageIntro, MediaItem, ButtonProps } from './global'
export interface Office {
  id: number
  city: string
  country: string
  address: string
  coordinates?: {
    lat: number
    lng: number
  }
}
export interface EmailContact {
  id: number
  label: string
  email: string
}
export interface SocialNetwork {
  id: number
  name: string
  url: string
  icon: string
}
export interface ContactContent {
  offices: Office[]
  emails: EmailContact[]
  socials: SocialNetwork[]
  formEnabled?: boolean
}
export interface ContactProps {
  contactSection: {
    formEnabled: any
    sectionIntro: PageIntro
    content: ContactContent
    buttons?: ButtonProps[]
  }
  designType: Number
}

================
File: src/types/feature.ts
================
import dynamicIconImports from 'lucide-react/dynamicIconImports'
export interface Feature {
  id: string
  name: string
  classIcon: keyof typeof dynamicIconImports
  content: any
  link: string
}

================
File: src/types/global.d.ts
================
import { Member } from './member'
export type BaseItem = {
  id: number
  publishedAt: Date
}
export interface BasesData {
  data: BaseItem[]
  meta: PaginationMeta
}
export interface BaseData {
  data: BaseItem
  meta: PaginationMeta
}
export interface Data {
  data: any
  meta: PaginationMeta
}
export interface MediaItem {
  id: string
  url: string
  provider_metadata?: any
  width: number
  height: number
  alternativeText: string
}
export interface SeoData {
  seo: {
    metaTitle: string
    metaDescription: string
    metaImage: MediaItem
  }
  pageIntro: PageIntro
}
export interface RestQueryParams extends Partial<PaginationMeta> {
  fields?: string | string[]
  filters?: object
  sort?: string
  populate: string | object
  locale?: string | string[]
  publicationState?: 'live' | 'preview'
  cover?: MediaItem
}
export interface PaginationMeta {
  pagination: {
    page: number
    pageSize: number
    pageCount?: number
    total?: number
  }
}
export interface PageIntro {
  title: string
  eyebrow: string
  content: string
  cover: MediaItem | null
  pagination: boolean
  embedVideo?: string
}
export interface Culture {
  id: string
  title: string
  content: string
}
export interface Office {
  name: string
  children: React.ReactNode
  invert: boolean
  phone?: string
}
export interface CTA {}
export interface ButtonProps {
  id: string
  link: string
  text: string
  type: string
}
export interface Pagination {
  id: number
  value: 'off' | 'infinite' | 'pagination'
}

================
File: src/types/member.ts
================
import { MediaItem } from '@/types/global'
import { Post } from './post'
export interface Member {
  id: string
  fullname: string
  title: string
  avatar: MediaItem
  link: string
  email: string
  posts: Post[]
  role: string
}

================
File: src/types/post.ts
================
import { BaseItem, PageIntro } from './global'
import { Member } from './member'
export interface Post extends BaseItem {
  pageIntro: PageIntro
  author: Member
  content: string
  structure: any
  slug: string
}

================
File: src/types/project.ts
================
import { MediaItem, PageIntro, PaginationMeta } from './global.d'
import { Tag } from './tag'
import { Post } from './post'
import { Testimonial } from './testimonial'
import { Service } from './service'
export interface Project {
  id: string
  pageIntro: PageIntro
  logo: MediaItem
  year: string
  client: string
  service: string
  link: string
  structure: any
  tags: Tag[]
  slug: string
}
export interface ProjectsData {
  data: Project[]
  meta: PaginationMeta
}
export interface ProjectData {
  data: Project
  meta: PaginationMeta
}

================
File: src/types/service.ts
================
import { CTA, PageIntro } from './global'
import { Project } from './project'
export interface Service {
  id: string
  pageIntro: PageIntro
  classIcon: string
  content: string
  cta: CTA[]
  projects: Project[]
  slug: string
}

================
File: src/types/tag.ts
================
import { Project } from './project'
export interface Tag {
  url: string
  classIcon: string
  projects: Project[]
}

================
File: src/types/team.ts
================
import { PageIntro } from './global'
import { Member } from './member'
export interface Team {
  id: string
  pageIntro: PageIntro
  classIcon: string
  content: string
  teams: Member[]
}

================
File: src/types/testimonial.ts
================
import { MediaItem } from './global'
import { Member } from './member'
export interface Testimonial {
  id: string
  title: string
  cover: MediaItem
  content: string
  author: Member
}

================
File: tagadart-ts.code-workspace
================
{
  "folders": [
    {
      "path": ".",
    },
  ],
  "settings": {
    "CodeGPT.apiKey": "CodeGPT Plus Beta",
    "workbench.colorCustomizations": {
      "activityBar.activeBackground": "#93e6fc",
      "activityBar.background": "#93e6fc",
      "activityBar.foreground": "#15202b",
      "activityBar.inactiveForeground": "#15202b99",
      "activityBarBadge.background": "#fa45d4",
      "activityBarBadge.foreground": "#15202b",
      "commandCenter.border": "#15202b99",
      "sash.hoverBorder": "#93e6fc",
      "statusBar.background": "#61dafb",
      "statusBar.foreground": "#15202b",
      "statusBarItem.hoverBackground": "#2fcefa",
      "statusBarItem.remoteBackground": "#61dafb",
      "statusBarItem.remoteForeground": "#15202b",
      "titleBar.activeBackground": "#61dafb",
      "titleBar.activeForeground": "#15202b",
      "titleBar.inactiveBackground": "#61dafb99",
      "titleBar.inactiveForeground": "#15202b99"
    },
    "peacock.color": "#61dafb",
  },
}

================
File: tailwind.config.ts
================
import { type Config } from 'tailwindcss'
import defaultTheme from 'tailwindcss/defaultTheme'
const isProduction = process.env.NODE_ENV === 'production'
export default {
  darkMode: ['class'],
  content: ['./src/**/*.{js,jsx,mdx,ts,tsx}'],
  theme: {
    fontSize: {
      xs: ['0.75rem', { lineHeight: '1rem' }],
      sm: ['0.875rem', { lineHeight: '1.5rem' }],
      base: ['1rem', { lineHeight: '1.75rem' }],
      lg: ['1.125rem', { lineHeight: '1.75rem' }],
      xl: ['1.25rem', { lineHeight: '2rem' }],
      '2xl': ['1.5rem', { lineHeight: '2.25rem' }],
      '3xl': ['1.75rem', { lineHeight: '2.25rem' }],
      '4xl': ['2rem', { lineHeight: '2.5rem' }],
      '5xl': ['2.5rem', { lineHeight: '3rem' }],
      '6xl': ['3rem', { lineHeight: '3.5rem' }],
      '7xl': ['4rem', { lineHeight: '4.5rem' }],
    },
    extend: {
      borderRadius: {
        '4xl': '2.5rem',
        lg: 'var(--radius)',
        md: 'calc(var(--radius) - 2px)',
        sm: 'calc(var(--radius) - 4px)',
      },
      backgroundImage: {
        'primary-gradient': 'linear-gradient(to left, #acb6e5, #74ebd5)',
      },
      colors: {
        primary: {
          '50': '#f0fdfa',
          '100': '#cdfaf0',
          '200': '#9af5e0',
          '300': '#74ebd5',
          '400': '#2fd2b8',
          '500': '#16b6a0',
          '600': '#0f9282',
          '700': '#10756a',
          '800': '#125d56',
          '900': '#144d47',
          '950': '#052e2c',
          DEFAULT: '#74ebd5',
        },
        secondary: {
          '50': '#f2f4fb',
          '100': '#e7ebf8',
          '200': '#d3d9f2',
          '300': '#acb6e5',
          '400': '#9ba1de',
          '500': '#8284d2',
          '600': '#6e69c2',
          '700': '#5e58aa',
          '800': '#4d498a',
          '900': '#42406f',
          '950': '#272640',
          PRIMARY: '#acb6e5',
        },
        accent: '#657786',
        success: '#28a745',
        warning: '#ffc107',
        danger: '#dc3545',
      },
      fontFamily: {
        display: ['var(--font-inter)', ...defaultTheme.fontFamily.sans],
        sans: ['var(--font-mona-sans)', ...defaultTheme.fontFamily.sans],
      },
    },
  },
  plugins: [require('@tailwindcss/typography'), require('tailwindcss-animate')],
} satisfies Config

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "es6",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts",
    "next-sitemap.config.js"
  ],
  "exclude": ["node_modules"]
}
